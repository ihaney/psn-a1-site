{"version":3,"file":"SourcesListPage-21gZEzsY.js","sources":["../../../src/pages/SourcesListPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport SEO from '../components/SEO';\nimport { supabase } from '../lib/supabase';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport Breadcrumbs from '../components/Breadcrumbs';\n\ninterface SourceListItem {\n  Source_ID: string;\n  Source_Title: string;\n  Source_Image: string | null;\n  Source_About: string | null;\n  product_count: number;\n  supplier_count: number;\n  country_count: number;\n}\n\nexport default function SourcesListPage() {\n  const [sources, setSources] = useState<SourceListItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchSources() {\n      try {\n        const { data: sourcesData, error: sourcesError } = await supabase\n          .from('Sources')\n          .select('Source_ID, Source_Title, Source_Image, Source_About');\n\n        if (sourcesError) throw sourcesError;\n\n        const sourcesWithCounts = await Promise.all(\n          (sourcesData || []).map(async (source) => {\n            // Get product count for this source\n            const { count: productCount } = await supabase\n              .from('Products')\n              .select('*', { count: 'exact', head: true })\n              .eq('Product_Source_ID', source.Source_ID);\n\n            // Get ACTUAL supplier count directly from Supplier table (not just suppliers with products)\n            const { count: supplierCount } = await supabase\n              .from('Supplier')\n              .select('*', { count: 'exact', head: true })\n              .eq('Supplier_Source_ID', source.Source_ID);\n            \n            // Get unique countries from products for this source\n            const { data: countriesData } = await supabase\n              .from('Products')\n              .select('Product_Country_ID')\n              .eq('Product_Source_ID', source.Source_ID);\n            \n            const uniqueCountries = new Set(countriesData?.map(p => p.Product_Country_ID));\n\n            return {\n              ...source,\n              product_count: productCount || 0,\n              supplier_count: supplierCount || 0, // This now shows ALL suppliers from this source\n              country_count: uniqueCountries.size\n            };\n          })\n        );\n\n        // Sort by product count (highest first)\n        const sortedSources = sourcesWithCounts.sort((a, b) => b.product_count - a.product_count);\n        setSources(sortedSources);\n      } catch (error) {\n        console.error('Error fetching sources:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchSources();\n  }, []);\n\n  const handleSourceClick = (sourceId: string) => {\n    navigate(`/search?source=${sourceId}`);\n  };\n\n  const totalProducts = sources.reduce((sum, source) => sum + source.product_count, 0);\n  const totalSuppliers = sources.reduce((sum, source) => sum + source.supplier_count, 0);\n  const totalCountries = sources.reduce((sum, source) => sum + source.country_count, 0);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <SEO \n        title=\"Product Sources\"\n        description={`Browse Latin American products from ${sources.length} trusted sources. Access ${totalProducts.toLocaleString()} products from ${totalSuppliers.toLocaleString()} suppliers across ${totalCountries} countries.`}\n        keywords={`Latin American marketplaces, ${sources.map(s => s.Source_Title).join(', ')}, B2B sources, wholesale sources`}\n      />\n      <div className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <Breadcrumbs currentPageTitle=\"Product Sources\" />\n\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\" data-tour=\"sources-list\">\n            {sources.map((source) => (\n              <div\n                key={source.Source_ID}\n                onClick={() => handleSourceClick(source.Source_ID)}\n                className=\"bg-gray-800/50 backdrop-blur-sm rounded-lg p-6 cursor-pointer hover:bg-gray-700/50 transition-all\"\n              >\n                <div className=\"flex items-center gap-4 mb-4\">\n                  {source.Source_Image && (\n                    <img\n                      src={source.Source_Image}\n                      alt={source.Source_Title}\n                      className=\"w-16 h-16 object-contain rounded-lg bg-gray-700/30 p-2\"\n                    />\n                  )}\n                  <div className=\"flex-1\">\n                    <h2 className=\"text-xl font-semibold text-gray-100 mb-1\">\n                      {source.Source_Title}\n                    </h2>\n                    <div className=\"text-sm text-[#F4A024] font-medium\">\n                      {source.product_count.toLocaleString()} products\n                    </div>\n                  </div>\n                </div>\n\n                {source.Source_About && (\n                  <div className=\"mb-4\">\n                    <p className=\"text-gray-300 text-sm leading-relaxed line-clamp-3\">\n                      {source.Source_About}\n                    </p>\n                  </div>\n                )}\n\n                <div className=\"space-y-2 pt-4 border-t border-gray-700/50\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Products:</span>\n                    <span className=\"text-[#F4A024] font-medium\">\n                      {source.product_count.toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Total Suppliers:</span>\n                    <span className=\"text-gray-300 font-medium\">\n                      {source.supplier_count.toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-400\">Countries:</span>\n                    <span className=\"text-gray-300\">\n                      {source.country_count.toLocaleString()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}"],"names":[],"mappings":"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"}