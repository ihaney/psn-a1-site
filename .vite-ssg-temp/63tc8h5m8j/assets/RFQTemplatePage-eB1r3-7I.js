import { jsx, jsxs, Fragment } from "react/jsx-runtime";
import React__default, { useState, useEffect, useCallback } from "react";
import { Upload, Search, X, Plus, FileText } from "lucide-react";
import { u as useProductSearch } from "./useProductSearch-Cp5Hx_LQ.js";
import { s as supabase, e as useSavedItems, V as Vt, L as LoadingSpinner, i as isBrowser, p as productsIndex } from "../main.mjs";
import "react-dom/client";
import "react-router-dom";
import "@tanstack/react-query";
import "react-fast-compare";
import "invariant";
import "shallowequal";
import "goober";
import "@supabase/supabase-js";
import "meilisearch";
function useSupplierSearch(query) {
  const [suppliers, setSuppliers] = useState([]);
  const [loading, setLoading] = useState(false);
  useEffect(() => {
    async function searchSuppliers() {
      if (!query.trim()) {
        setSuppliers([]);
        return;
      }
      setLoading(true);
      try {
        const { data, error } = await supabase.from("Supplier").select("Supplier_ID, Supplier_Title").ilike("Supplier_Title", `%${query}%`).limit(5);
        if (error) throw error;
        setSuppliers(data || []);
      } catch (error) {
        console.error("Error searching suppliers:", error);
        setSuppliers([]);
      } finally {
        setLoading(false);
      }
    }
    const timeoutId = setTimeout(searchSuppliers, 300);
    return () => clearTimeout(timeoutId);
  }, [query]);
  return { suppliers, loading };
}
React__default.lazy(
  () => import("@react-pdf/renderer").then((module) => ({
    default: {
      PDFDownloadLink: module.PDFDownloadLink,
      Document: module.Document,
      Page: module.Page,
      Text: module.Text,
      View: module.View,
      StyleSheet: module.StyleSheet,
      Font: module.Font
    }
  }))
);
const initialFormData = {
  companyName: "",
  email: "",
  address: "",
  city: "",
  zipCode: "",
  countryRegion: "",
  stateProvince: "",
  vendorName: "",
  vendorId: null,
  items: [],
  notes: ""
};
const pdfStyles = {
  page: {
    padding: 40,
    fontFamily: "Helvetica"
  },
  header: {
    marginBottom: 20,
    borderBottom: "1 solid #cccccc",
    paddingBottom: 10
  },
  title: {
    fontSize: 24,
    textAlign: "center",
    marginBottom: 10,
    color: "#F4A024",
    fontWeight: "bold"
  },
  subtitle: {
    fontSize: 12,
    textAlign: "center",
    color: "#666666",
    marginBottom: 5
  },
  date: {
    fontSize: 10,
    textAlign: "right",
    color: "#666666"
  },
  section: {
    marginBottom: 20
  },
  sectionTitle: {
    fontSize: 14,
    marginBottom: 10,
    backgroundColor: "#f5f5f5",
    padding: 5,
    fontWeight: "bold"
  },
  table: {
    width: "100%",
    marginBottom: 10
  },
  tableHeader: {
    flexDirection: "row",
    backgroundColor: "#f5f5f5",
    borderBottomColor: "#cccccc",
    borderBottomWidth: 1,
    padding: 8
  },
  tableRow: {
    flexDirection: "row",
    borderBottomColor: "#eeeeee",
    borderBottomWidth: 1,
    padding: 8,
    minHeight: 24
  },
  tableCell: {
    flex: 1,
    fontSize: 10
  },
  tableCellHeader: {
    flex: 1,
    fontSize: 10,
    fontWeight: "bold"
  },
  infoRow: {
    flexDirection: "row",
    marginBottom: 5
  },
  label: {
    width: 120,
    fontSize: 10,
    fontWeight: "bold"
  },
  value: {
    flex: 1,
    fontSize: 10
  },
  notes: {
    marginTop: 20,
    padding: 10,
    backgroundColor: "#f9f9f9"
  },
  notesTitle: {
    fontSize: 12,
    fontWeight: "bold",
    marginBottom: 5
  },
  notesText: {
    fontSize: 10,
    lineHeight: 1.4
  },
  footer: {
    position: "absolute",
    bottom: 30,
    left: 40,
    right: 40,
    textAlign: "center",
    color: "#666666",
    fontSize: 8,
    borderTop: "1 solid #cccccc",
    paddingTop: 10
  }
};
const createRFQDocument = (PDFComponents2, data) => {
  const { Document, Page, Text, View, StyleSheet } = PDFComponents2;
  const styles = StyleSheet.create(pdfStyles);
  return React__default.createElement(
    Document,
    null,
    React__default.createElement(
      Page,
      { size: "A4", style: styles.page },
      React__default.createElement(
        View,
        { style: styles.header },
        React__default.createElement(Text, { style: styles.title }, "Request for Quotation (RFQ)"),
        React__default.createElement(Text, { style: styles.subtitle }, "Generated by Paisán - Latin American Products Marketplace"),
        React__default.createElement(
          Text,
          { style: styles.date },
          (/* @__PURE__ */ new Date()).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
            hour: "2-digit",
            minute: "2-digit"
          })
        )
      ),
      React__default.createElement(
        View,
        { style: styles.section },
        React__default.createElement(Text, { style: styles.sectionTitle }, "Customer Information"),
        React__default.createElement(
          View,
          { style: styles.table },
          React__default.createElement(
            View,
            { style: styles.tableRow },
            React__default.createElement(Text, { style: styles.label }, "Company Name:"),
            React__default.createElement(Text, { style: styles.value }, data.companyName)
          ),
          React__default.createElement(
            View,
            { style: styles.tableRow },
            React__default.createElement(Text, { style: styles.label }, "Email:"),
            React__default.createElement(Text, { style: styles.value }, data.email)
          ),
          React__default.createElement(
            View,
            { style: styles.tableRow },
            React__default.createElement(Text, { style: styles.label }, "Address:"),
            React__default.createElement(Text, { style: styles.value }, data.address)
          ),
          React__default.createElement(
            View,
            { style: styles.tableRow },
            React__default.createElement(Text, { style: styles.label }, "City:"),
            React__default.createElement(Text, { style: styles.value }, data.city)
          ),
          React__default.createElement(
            View,
            { style: styles.tableRow },
            React__default.createElement(Text, { style: styles.label }, "State/Province:"),
            React__default.createElement(Text, { style: styles.value }, data.stateProvince)
          ),
          React__default.createElement(
            View,
            { style: styles.tableRow },
            React__default.createElement(Text, { style: styles.label }, "Country/Region:"),
            React__default.createElement(Text, { style: styles.value }, data.countryRegion)
          )
        )
      ),
      React__default.createElement(
        View,
        { style: styles.section },
        React__default.createElement(Text, { style: styles.sectionTitle }, "Vendor Information"),
        React__default.createElement(
          View,
          { style: styles.table },
          React__default.createElement(
            View,
            { style: styles.tableRow },
            React__default.createElement(Text, { style: styles.label }, "Vendor Name:"),
            React__default.createElement(Text, { style: styles.value }, data.vendorName || "Multiple Vendors")
          )
        )
      ),
      React__default.createElement(
        View,
        { style: styles.section },
        React__default.createElement(Text, { style: styles.sectionTitle }, "Requested Items"),
        React__default.createElement(
          View,
          { style: styles.table },
          React__default.createElement(
            View,
            { style: styles.tableHeader },
            React__default.createElement(Text, { style: [styles.tableCellHeader, { flex: 2 }] }, "Item Description"),
            React__default.createElement(Text, { style: [styles.tableCellHeader, { flex: 2 }] }, "Product Link"),
            React__default.createElement(Text, { style: styles.tableCellHeader }, "MOQ"),
            React__default.createElement(Text, { style: styles.tableCellHeader }, "Quantity")
          ),
          ...data.items.map(
            (item, index) => React__default.createElement(
              View,
              { key: index, style: styles.tableRow },
              React__default.createElement(Text, { style: [styles.tableCell, { flex: 2 }] }, item.name),
              React__default.createElement(Text, { style: [styles.tableCell, { flex: 2 }] }, item.url),
              React__default.createElement(Text, { style: styles.tableCell }, item.moq),
              React__default.createElement(Text, { style: styles.tableCell }, item.quantity)
            )
          )
        )
      ),
      data.notes && React__default.createElement(
        View,
        { style: styles.notes },
        React__default.createElement(Text, { style: styles.notesTitle }, "Additional Notes"),
        React__default.createElement(Text, { style: styles.notesText }, data.notes)
      ),
      React__default.createElement(
        Text,
        { style: styles.footer },
        "This RFQ was automatically generated through Paisán (paisan.net). For any questions, please contact support@paisan.net"
      )
    )
  );
};
function useDebouncedValue(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value);
  React__default.useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(value), delay);
    return () => clearTimeout(handler);
  }, [value, delay]);
  return debouncedValue;
}
function RFQTemplatePage() {
  const [formData, setFormData] = useState(initialFormData);
  const [vendorSearchQuery, setVendorSearchQuery] = useState("");
  const [productSearchQuery, setProductSearchQuery] = useState("");
  const [showProductSearch, setShowProductSearch] = useState(false);
  const [showVendorSearch, setShowVendorSearch] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const [pdfLoading, setPdfLoading] = useState(false);
  const { suppliers: vendorResults, loading: vendorLoading } = useSupplierSearch(vendorSearchQuery);
  const { products, loading: productLoading } = useProductSearch(productSearchQuery, formData.vendorId);
  const { data: savedItems = [], isLoading: savedItemsLoading } = useSavedItems();
  const debouncedProductQuery = useDebouncedValue(productSearchQuery, 300);
  React__default.useEffect(() => {
    async function performProductSearch() {
      if (!debouncedProductQuery.trim()) {
        setSearchResults([]);
        return;
      }
      setSearchLoading(true);
      try {
        const searchResponse = await productsIndex.search(debouncedProductQuery, {
          limit: 20,
          attributesToRetrieve: [
            "id",
            "title",
            "price",
            "image",
            "url",
            "moq",
            "country",
            "category",
            "supplier",
            "source"
          ]
        });
        const formattedResults = searchResponse.hits.map((hit) => ({
          id: hit.id,
          name: hit.title,
          price: hit.price,
          image: hit.image || "",
          country: hit.country || "Unknown",
          category: hit.category || "Unknown",
          supplier: hit.supplier || "Unknown",
          marketplace: hit.source || "Unknown",
          moq: hit.moq || "N/A"
        }));
        setSearchResults(formattedResults);
      } catch (error) {
        console.error("Product search error:", error);
        setSearchResults([]);
      } finally {
        setSearchLoading(false);
      }
    }
    performProductSearch();
  }, [debouncedProductQuery]);
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value
    }));
    if (name === "vendorName") {
      setVendorSearchQuery(value);
      setShowVendorSearch(true);
    }
  };
  const handleVendorSelect = (vendorId, vendorName) => {
    setFormData((prev) => ({
      ...prev,
      vendorId,
      vendorName
    }));
    setShowVendorSearch(false);
    setVendorSearchQuery("");
  };
  const handleItemQuantityChange = (itemId, quantity) => {
    setFormData((prev) => ({
      ...prev,
      items: prev.items.map(
        (item) => item.id === itemId ? { ...item, quantity } : item
      )
    }));
  };
  const addItemFromSearch = (result) => {
    const existingItem = formData.items.find((item) => item.id === result.id);
    if (existingItem) {
      Vt.info("This item is already in your RFQ");
      return;
    }
    setFormData((prev) => ({
      ...prev,
      items: [...prev.items, {
        id: result.id,
        name: result.name,
        url: `https://paisan.net/product/${result.id}`,
        quantity: "1",
        moq: result.moq || "N/A"
      }]
    }));
    Vt.success("Item added to RFQ");
  };
  const addItem = (product) => {
    if (!product) return;
    const existingItem = formData.items.find((item) => item.id === product.Product_ID);
    if (existingItem) {
      Vt.info("This item is already in your RFQ");
      return;
    }
    const basePrice = parseFloat((product.Product_Price || "").replace(/[^0-9.-]+/g, ""));
    if (!isNaN(basePrice)) {
      setFormData((prev) => ({
        ...prev,
        items: [...prev.items, {
          id: product.Product_ID,
          name: product.Product_Title || "Untitled Product",
          url: `https://paisan.net/product/${product.Product_ID}`,
          quantity: "1",
          moq: product.Product_MOQ || "N/A"
        }]
      }));
      Vt.success("Item added to RFQ");
    }
    setProductSearchQuery("");
  };
  const removeItem = (itemId) => {
    setFormData((prev) => ({
      ...prev,
      items: prev.items.filter((item) => item.id !== itemId)
    }));
    Vt.success("Item removed from RFQ");
  };
  const importSavedItems = () => {
    if (savedItems.length === 0) {
      Vt.error("No saved items found");
      return;
    }
    const newItems = savedItems.map((item) => ({
      id: item.id,
      name: item.name,
      url: `https://paisan.net/product/${item.id}`,
      quantity: "1",
      moq: item.Product_MOQ || "N/A"
    }));
    const existingItemIds = new Set(formData.items.map((item) => item.id));
    const itemsToAdd = newItems.filter((item) => !existingItemIds.has(item.id));
    if (itemsToAdd.length === 0) {
      Vt.info("All saved items are already in your RFQ");
      return;
    }
    setFormData((prev) => ({
      ...prev,
      items: [...prev.items, ...itemsToAdd]
    }));
    Vt.success(`Added ${itemsToAdd.length} saved items to your RFQ`);
  };
  const handlePDFDownload = useCallback(async () => {
    setPdfLoading(true);
    try {
      const PDFModule = await import("@react-pdf/renderer");
      const pdfComponents = {
        PDFDownloadLink: PDFModule.PDFDownloadLink,
        Document: PDFModule.Document,
        Page: PDFModule.Page,
        Text: PDFModule.Text,
        View: PDFModule.View,
        StyleSheet: PDFModule.StyleSheet
      };
      const document = createRFQDocument(pdfComponents, formData);
      const blob = await PDFModule.pdf(document).toBlob();
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = "rfq-template.pdf";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error("Error generating PDF:", error);
      Vt.error("Failed to generate PDF. Please try again.");
    } finally {
      setPdfLoading(false);
    }
  }, [formData]);
  return /* @__PURE__ */ jsx("div", { className: "min-h-screen bg-black text-white pt-32 pb-12 px-4 sm:px-6 lg:px-8", children: /* @__PURE__ */ jsxs("div", { className: "max-w-4xl mx-auto", children: [
    /* @__PURE__ */ jsxs("div", { className: "text-center mb-8", children: [
      /* @__PURE__ */ jsx("h1", { className: "text-3xl font-bold mb-2", children: "Request For Quote (RFQ) Template" }),
      /* @__PURE__ */ jsx("p", { className: "text-gray-400", children: "Simplify your quoting process" }),
      /* @__PURE__ */ jsx("p", { className: "text-sm text-[#F4A024] mt-2", children: "Free RFQ template, instantly export as PDF!" })
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "bg-gray-900 rounded-lg p-8 mb-8", children: [
      /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold mb-6", children: "Enter your company information" }),
      /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-2 gap-6", children: [
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-300 mb-1", children: "Company name" }),
          /* @__PURE__ */ jsx(
            "input",
            {
              type: "text",
              name: "companyName",
              value: formData.companyName,
              onChange: handleChange,
              className: "w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
            }
          )
        ] }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-300 mb-1", children: "Email" }),
          /* @__PURE__ */ jsx(
            "input",
            {
              type: "email",
              name: "email",
              value: formData.email,
              onChange: handleChange,
              className: "w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
            }
          )
        ] }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-300 mb-1", children: "Address" }),
          /* @__PURE__ */ jsx(
            "input",
            {
              type: "text",
              name: "address",
              value: formData.address,
              onChange: handleChange,
              className: "w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
            }
          )
        ] }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-300 mb-1", children: "City" }),
          /* @__PURE__ */ jsx(
            "input",
            {
              type: "text",
              name: "city",
              value: formData.city,
              onChange: handleChange,
              className: "w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
            }
          )
        ] }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-300 mb-1", children: "Country/Region" }),
          /* @__PURE__ */ jsx(
            "input",
            {
              type: "text",
              name: "countryRegion",
              value: formData.countryRegion,
              onChange: handleChange,
              className: "w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
            }
          )
        ] }),
        /* @__PURE__ */ jsxs("div", { children: [
          /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-300 mb-1", children: "State/Province" }),
          /* @__PURE__ */ jsx(
            "input",
            {
              type: "text",
              name: "stateProvince",
              value: formData.stateProvince,
              onChange: handleChange,
              className: "w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
            }
          )
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "bg-gray-900 rounded-lg p-8 mb-8", children: [
      /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold mb-6", children: "Enter vendor information" }),
      /* @__PURE__ */ jsxs("div", { className: "relative", children: [
        /* @__PURE__ */ jsx("label", { className: "block text-sm font-medium text-gray-300 mb-1", children: "Vendor name (Optional)" }),
        /* @__PURE__ */ jsx(
          "input",
          {
            type: "text",
            name: "vendorName",
            value: formData.vendorName,
            onChange: handleChange,
            className: "w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]",
            placeholder: "Search for a vendor or leave blank for multiple vendors..."
          }
        ),
        showVendorSearch && vendorResults.length > 0 && /* @__PURE__ */ jsx("div", { className: "absolute z-10 w-full mt-1 bg-gray-800 border border-gray-700 rounded-md shadow-lg", children: vendorLoading ? /* @__PURE__ */ jsx("div", { className: "p-4 text-center", children: /* @__PURE__ */ jsx(LoadingSpinner, {}) }) : /* @__PURE__ */ jsx("div", { className: "max-h-60 overflow-y-auto", children: vendorResults.map((vendor) => /* @__PURE__ */ jsx(
          "button",
          {
            onClick: () => handleVendorSelect(vendor.Supplier_ID, vendor.Supplier_Title),
            className: "w-full text-left px-4 py-2 hover:bg-gray-700 transition-colors",
            children: vendor.Supplier_Title
          },
          vendor.Supplier_ID
        )) }) })
      ] })
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "bg-gray-900 rounded-lg p-8 mb-8", children: [
      /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-6", children: [
        /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold", children: "Enter the items you wish to order" }),
        /* @__PURE__ */ jsxs("div", { className: "flex gap-4", children: [
          savedItems.length > 0 && /* @__PURE__ */ jsxs(
            "button",
            {
              onClick: importSavedItems,
              disabled: savedItemsLoading,
              className: "flex items-center gap-2 bg-[#F4A024] text-gray-900 px-4 py-2 rounded-md hover:bg-[#F4A024]/90 transition-colors font-medium disabled:opacity-50",
              children: [
                /* @__PURE__ */ jsx(Upload, { className: "w-4 h-4" }),
                "Import Saved Items (",
                savedItems.length,
                ")"
              ]
            }
          ),
          /* @__PURE__ */ jsxs(
            "button",
            {
              onClick: () => setShowProductSearch(true),
              className: "flex items-center gap-2 bg-[#F4A024] text-gray-900 px-4 py-2 rounded-md hover:bg-[#F4A024]/90 transition-colors font-medium",
              children: [
                /* @__PURE__ */ jsx(Search, { className: "w-4 h-4" }),
                "Search Products"
              ]
            }
          )
        ] })
      ] }),
      showProductSearch && /* @__PURE__ */ jsx("div", { className: "fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-start justify-center pt-16 px-4", children: /* @__PURE__ */ jsxs("div", { className: "bg-gray-900 rounded-lg shadow-lg w-full max-w-3xl p-6 relative", children: [
        /* @__PURE__ */ jsxs("div", { className: "flex items-center justify-between mb-4", children: [
          /* @__PURE__ */ jsx("h3", { className: "text-xl font-semibold text-white", children: "Search Products" }),
          /* @__PURE__ */ jsx(
            "button",
            {
              onClick: () => {
                setShowProductSearch(false);
                setProductSearchQuery("");
                setSearchResults([]);
              },
              className: "text-gray-400 hover:text-white transition-colors bg-gray-800 rounded-full p-2",
              children: /* @__PURE__ */ jsx(X, { className: "w-5 h-5" })
            }
          )
        ] }),
        /* @__PURE__ */ jsxs("div", { className: "relative mb-4", children: [
          /* @__PURE__ */ jsx(Search, { className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" }),
          /* @__PURE__ */ jsx(
            "input",
            {
              type: "text",
              value: productSearchQuery,
              onChange: (e) => setProductSearchQuery(e.target.value),
              placeholder: "Search for products to add to your RFQ...",
              className: "w-full bg-gray-800 text-white placeholder-gray-400 border border-gray-700 rounded-lg pl-10 pr-4 py-3 focus:outline-none focus:border-[#F4A024] focus:ring-1 focus:ring-[#F4A024]",
              autoFocus: true
            }
          ),
          searchLoading && /* @__PURE__ */ jsx("div", { className: "absolute right-3 top-1/2 -translate-y-1/2", children: /* @__PURE__ */ jsx(LoadingSpinner, {}) })
        ] }),
        /* @__PURE__ */ jsx("div", { className: "max-h-[60vh] overflow-y-auto", children: searchResults.length > 0 ? /* @__PURE__ */ jsx("div", { className: "space-y-2", children: searchResults.map((result) => /* @__PURE__ */ jsx(
          "div",
          {
            className: "p-3 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors cursor-pointer",
            onClick: () => addItemFromSearch(result),
            children: /* @__PURE__ */ jsxs("div", { className: "flex items-center gap-3", children: [
              result.image && /* @__PURE__ */ jsx(
                "img",
                {
                  src: result.image,
                  alt: result.name,
                  className: "w-16 h-16 object-cover rounded"
                }
              ),
              /* @__PURE__ */ jsxs("div", { className: "flex-1", children: [
                /* @__PURE__ */ jsx("h4", { className: "font-medium text-white mb-1", children: result.name }),
                /* @__PURE__ */ jsxs("div", { className: "flex gap-2 text-sm text-gray-400", children: [
                  /* @__PURE__ */ jsx("span", { children: result.category }),
                  /* @__PURE__ */ jsx("span", { children: "•" }),
                  /* @__PURE__ */ jsx("span", { children: result.supplier }),
                  result.price && /* @__PURE__ */ jsxs(Fragment, { children: [
                    /* @__PURE__ */ jsx("span", { children: "•" }),
                    /* @__PURE__ */ jsx("span", { className: "text-[#F4A024]", children: result.price })
                  ] })
                ] }),
                /* @__PURE__ */ jsxs("div", { className: "text-xs text-gray-500 mt-1", children: [
                  "MOQ: ",
                  result.moq,
                  " • ",
                  result.marketplace,
                  " • ",
                  result.country
                ] })
              ] }),
              /* @__PURE__ */ jsx(
                "button",
                {
                  onClick: (e) => {
                    e.stopPropagation();
                    addItemFromSearch(result);
                  },
                  className: "bg-[#F4A024] text-gray-900 px-3 py-1 rounded text-sm font-medium hover:bg-[#F4A024]/90 transition-colors",
                  children: "Add to RFQ"
                }
              )
            ] })
          },
          result.id
        )) }) : productSearchQuery && !searchLoading ? /* @__PURE__ */ jsx("p", { className: "text-center text-gray-400 py-8", children: "No products found. Try different keywords." }) : !productSearchQuery ? /* @__PURE__ */ jsx("p", { className: "text-center text-gray-400 py-8", children: "Start typing to search for products..." }) : null })
      ] }) }),
      /* @__PURE__ */ jsxs("div", { className: "space-y-4 mb-6", children: [
        formData.items.length > 0 ? formData.items.map((item) => /* @__PURE__ */ jsx("div", { className: "bg-gray-800 p-4 rounded-lg", children: /* @__PURE__ */ jsxs("div", { className: "grid grid-cols-12 gap-4 items-center", children: [
          /* @__PURE__ */ jsxs("div", { className: "col-span-5", children: [
            /* @__PURE__ */ jsx("p", { className: "text-gray-100 font-medium mb-1", children: item.name }),
            /* @__PURE__ */ jsx(
              "a",
              {
                href: item.url,
                target: "_blank",
                rel: "noopener noreferrer",
                className: "text-sm text-[#F4A024] hover:text-[#F4A024]/80",
                children: "View product"
              }
            )
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "col-span-2 text-center", children: [
            /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-400", children: "MOQ" }),
            /* @__PURE__ */ jsx("p", { className: "text-gray-300", children: item.moq })
          ] }),
          /* @__PURE__ */ jsxs("div", { className: "col-span-3", children: [
            /* @__PURE__ */ jsx("label", { className: "block text-sm text-gray-400 mb-1", children: "Quantity" }),
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "number",
                min: item.moq !== "N/A" ? item.moq : 1,
                value: item.quantity,
                onChange: (e) => handleItemQuantityChange(item.id, e.target.value),
                className: "w-full bg-gray-700 border border-gray-600 rounded-md px-3 py-2 text-white focus:outline-none focus:border-[#F4A024]"
              }
            )
          ] }),
          /* @__PURE__ */ jsx("div", { className: "col-span-2 text-center", children: /* @__PURE__ */ jsx(
            "button",
            {
              onClick: () => removeItem(item.id),
              className: "text-red-400 hover:text-red-300 transition-colors p-2",
              title: "Remove item",
              children: /* @__PURE__ */ jsx(X, { className: "w-4 h-4" })
            }
          ) })
        ] }) }, item.id)) : /* @__PURE__ */ jsxs("div", { className: "text-center py-8 border-2 border-dashed border-gray-700 rounded-lg", children: [
          /* @__PURE__ */ jsx("p", { className: "text-gray-400 font-bold mb-2", children: "No items added yet" }),
          /* @__PURE__ */ jsx("p", { className: "text-sm text-gray-500 font-bold", children: savedItems.length > 0 ? 'Use the "Import Saved Items" button above or search for products to add' : "Search for products above to start creating your RFQ" })
        ] }),
        formData.vendorId && /* @__PURE__ */ jsxs("div", { className: "mt-4", children: [
          /* @__PURE__ */ jsxs("div", { className: "relative mb-4", children: [
            /* @__PURE__ */ jsx(Search, { className: "absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" }),
            /* @__PURE__ */ jsx(
              "input",
              {
                type: "text",
                value: productSearchQuery,
                onChange: (e) => setProductSearchQuery(e.target.value),
                placeholder: "Search vendor products...",
                className: "w-full bg-gray-800 border border-gray-700 rounded-md pl-10 pr-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
              }
            )
          ] }),
          productLoading ? /* @__PURE__ */ jsx("div", { className: "text-center py-4", children: /* @__PURE__ */ jsx(LoadingSpinner, {}) }) : products.length > 0 ? /* @__PURE__ */ jsx("div", { className: "mt-2 space-y-2 max-h-60 overflow-y-auto", children: products.map((product) => /* @__PURE__ */ jsx(
            "button",
            {
              onClick: () => addItem(product),
              className: "w-full text-left p-2 hover:bg-gray-800 rounded-md transition-colors",
              children: product.Product_Title
            },
            product.Product_ID
          )) }) : productSearchQuery && /* @__PURE__ */ jsx("p", { className: "text-gray-400 text-sm mt-2", children: "No products found" }),
          /* @__PURE__ */ jsx("div", { className: "mt-4", children: /* @__PURE__ */ jsxs(
            "button",
            {
              onClick: () => setShowProductSearch(true),
              className: "flex items-center gap-2 text-[#F4A024] hover:text-[#F4A024]/80 transition-colors",
              children: [
                /* @__PURE__ */ jsx(Plus, { className: "w-4 h-4" }),
                "Add items from ",
                formData.vendorName
              ]
            }
          ) })
        ] })
      ] })
    ] }),
    /* @__PURE__ */ jsxs("div", { className: "bg-gray-900 rounded-lg p-8 mb-8", children: [
      /* @__PURE__ */ jsx("h2", { className: "text-xl font-semibold mb-6", children: "Notes / Memo" }),
      /* @__PURE__ */ jsx(
        "textarea",
        {
          name: "notes",
          value: formData.notes,
          onChange: handleChange,
          rows: 6,
          className: "w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]",
          placeholder: "Add any additional notes or special requirements..."
        }
      )
    ] }),
    /* @__PURE__ */ jsx("div", { className: "flex justify-end", children: /* @__PURE__ */ jsxs(
      "button",
      {
        onClick: handlePDFDownload,
        disabled: pdfLoading,
        className: "flex items-center gap-2 bg-[#F4A024] text-black px-6 py-3 rounded-lg hover:bg-[#F4A024]/90 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed",
        style: { display: isBrowser ? "flex" : "none" },
        children: [
          /* @__PURE__ */ jsx(FileText, { className: "w-5 h-5" }),
          pdfLoading ? "Generating PDF..." : "Export as PDF"
        ]
      }
    ) })
  ] }) });
}
export {
  RFQTemplatePage as default
};
//# sourceMappingURL=RFQTemplatePage-eB1r3-7I.js.map
