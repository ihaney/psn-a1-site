{"version":3,"file":"CategoriesPage-COohdAzI.js","sources":["../../../src/pages/CategoriesPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport SEO from '../components/SEO';\nimport { supabase } from '../lib/supabase';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport Breadcrumbs from '../components/Breadcrumbs';\n\ninterface Category {\n  Category_ID: string;\n  Category_Name: string;\n  product_count: number;\n  supplier_count: number;\n}\n\nexport default function CategoriesPage() {\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchCategories() {\n      try {\n        console.log('Fetching categories...');\n        \n        const { data: categoriesData, error: categoriesError } = await supabase\n          .from('Categories')\n          .select('*');\n\n        if (categoriesError) {\n          console.error('Categories error:', categoriesError);\n          throw categoriesError;\n        }\n\n        console.log('Categories data:', categoriesData);\n\n        if (!categoriesData || categoriesData.length === 0) {\n          setCategories([]);\n          setError('No categories found in the database');\n          return;\n        }\n\n        // Fetch all products in a single query for efficient counting\n        console.log('Fetching all products for count aggregation...');\n        const { data: allProducts, error: productsError } = await supabase\n          .from('Products')\n          .select('Product_ID, Product_Category_ID, Product_Supplier_ID');\n\n        if (productsError) {\n          console.error('Products error:', productsError);\n          throw productsError;\n        }\n\n        console.log('All products data:', allProducts?.length || 0, 'products');\n\n        // Create maps to count products and suppliers per category\n        const categoryProductCounts = new Map<string, number>();\n        const categorySupplierSets = new Map<string, Set<string>>();\n\n        // Initialize maps for all categories\n        categoriesData.forEach(category => {\n          categoryProductCounts.set(category.Category_ID, 0);\n          categorySupplierSets.set(category.Category_ID, new Set());\n        });\n\n        // Count products and collect unique suppliers per category\n        if (allProducts) {\n          allProducts.forEach(product => {\n            const categoryId = product.Product_Category_ID;\n            const supplierId = product.Product_Supplier_ID;\n\n            if (categoryId) {\n              // Increment product count\n              const currentCount = categoryProductCounts.get(categoryId) || 0;\n              categoryProductCounts.set(categoryId, currentCount + 1);\n\n              // Add supplier to set (automatically handles uniqueness)\n              if (supplierId) {\n                const supplierSet = categorySupplierSets.get(categoryId);\n                if (supplierSet) {\n                  supplierSet.add(supplierId);\n                }\n              }\n            }\n          });\n        }\n\n        // Build final categories with counts\n        const categoriesWithCounts = categoriesData.map(category => ({\n          Category_ID: category.Category_ID,\n          Category_Name: category.Category_Name,\n          product_count: categoryProductCounts.get(category.Category_ID) || 0,\n          supplier_count: categorySupplierSets.get(category.Category_ID)?.size || 0\n        }));\n\n        console.log('Categories with counts:', categoriesWithCounts.slice(0, 3));\n\n        setCategories(categoriesWithCounts);\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n        setError(error instanceof Error ? error.message : 'Failed to fetch categories');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchCategories();\n  }, []);\n\n  const handleCategoryClick = (categoryId: string) => {\n    navigate(`/search?category=${categoryId}`);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <h1 className=\"text-3xl font-bold text-red-500 mb-4\">Error Loading Categories</h1>\n          <p className=\"text-gray-300\">{error}</p>\n          <p className=\"text-sm text-gray-400 mt-2\">Check the browser console for more details.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <SEO \n        title=\"Product Categories\"\n        description=\"Browse our Latin American product categories. Find wholesale products across various industries and categories.\"\n        keywords=\"Latin American categories, product categories, wholesale categories, B2B categories\"\n      />\n      <div className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <Breadcrumbs currentPageTitle=\"Product Categories\" />\n          \n          {categories.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-300\">No categories found.</p>\n              <p className=\"text-sm text-gray-400 mt-2\">This might be a database connection issue.</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-tour=\"categories-grid\">\n              {categories.map((category) => (\n                <button\n                  key={category.Category_ID}\n                  onClick={() => handleCategoryClick(category.Category_ID)}\n                  className=\"bg-gray-800/50 backdrop-blur-sm rounded-lg p-6 hover:bg-gray-700/50 transition-colors text-left\"\n                >\n                  <h2 className=\"text-xl font-semibold text-gray-100 mb-4\">\n                    {category.Category_Name}\n                  </h2>\n                  <div className=\"space-y-2\">\n                    <p className=\"text-gray-300\">\n                      {category.product_count} {category.product_count === 1 ? 'product' : 'products'}\n                    </p>\n                    <p className=\"text-gray-300\">\n                      {category.supplier_count} {category.supplier_count === 1 ? 'supplier' : 'suppliers'}\n                    </p>\n                  </div>\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}"],"names":["error"],"mappings":";;;;;;;;;;;;;;;AAcA,SAAwB,iBAAiB;AACvC,QAAM,CAAC,YAAY,aAAa,IAAI,SAAqB,CAAA,CAAE;AAC3D,QAAM,CAAC,SAAS,UAAU,IAAI,SAAS,IAAI;AAC3C,QAAM,CAAC,OAAO,QAAQ,IAAI,SAAwB,IAAI;AACtD,QAAM,WAAW,YAAA;AAEjB,YAAU,MAAM;AACd,mBAAe,kBAAkB;AAC/B,UAAI;AACF,gBAAQ,IAAI,wBAAwB;AAEpC,cAAM,EAAE,MAAM,gBAAgB,OAAO,gBAAA,IAAoB,MAAM,SAC5D,KAAK,YAAY,EACjB,OAAO,GAAG;AAEb,YAAI,iBAAiB;AACnB,kBAAQ,MAAM,qBAAqB,eAAe;AAClD,gBAAM;AAAA,QAAA;AAGR,gBAAQ,IAAI,oBAAoB,cAAc;AAE9C,YAAI,CAAC,kBAAkB,eAAe,WAAW,GAAG;AAClD,wBAAc,CAAA,CAAE;AAChB,mBAAS,qCAAqC;AAC9C;AAAA,QAAA;AAIF,gBAAQ,IAAI,gDAAgD;AAC5D,cAAM,EAAE,MAAM,aAAa,OAAO,cAAA,IAAkB,MAAM,SACvD,KAAK,UAAU,EACf,OAAO,sDAAsD;AAEhE,YAAI,eAAe;AACjB,kBAAQ,MAAM,mBAAmB,aAAa;AAC9C,gBAAM;AAAA,QAAA;AAGR,gBAAQ,IAAI,uBAAsB,2CAAa,WAAU,GAAG,UAAU;AAGtE,cAAM,4CAA4B,IAAA;AAClC,cAAM,2CAA2B,IAAA;AAGjC,uBAAe,QAAQ,CAAA,aAAY;AACjC,gCAAsB,IAAI,SAAS,aAAa,CAAC;AACjD,+BAAqB,IAAI,SAAS,aAAa,oBAAI,KAAK;AAAA,QAAA,CACzD;AAGD,YAAI,aAAa;AACf,sBAAY,QAAQ,CAAA,YAAW;AAC7B,kBAAM,aAAa,QAAQ;AAC3B,kBAAM,aAAa,QAAQ;AAE3B,gBAAI,YAAY;AAEd,oBAAM,eAAe,sBAAsB,IAAI,UAAU,KAAK;AAC9D,oCAAsB,IAAI,YAAY,eAAe,CAAC;AAGtD,kBAAI,YAAY;AACd,sBAAM,cAAc,qBAAqB,IAAI,UAAU;AACvD,oBAAI,aAAa;AACf,8BAAY,IAAI,UAAU;AAAA,gBAAA;AAAA,cAC5B;AAAA,YACF;AAAA,UACF,CACD;AAAA,QAAA;AAIH,cAAM,uBAAuB,eAAe,IAAI,CAAA,aAAA;;AAAa;AAAA,YAC3D,aAAa,SAAS;AAAA,YACtB,eAAe,SAAS;AAAA,YACxB,eAAe,sBAAsB,IAAI,SAAS,WAAW,KAAK;AAAA,YAClE,kBAAgB,0BAAqB,IAAI,SAAS,WAAW,MAA7C,mBAAgD,SAAQ;AAAA,UAAA;AAAA,SACxE;AAEF,gBAAQ,IAAI,2BAA2B,qBAAqB,MAAM,GAAG,CAAC,CAAC;AAEvE,sBAAc,oBAAoB;AAAA,MAAA,SAC3BA,QAAO;AACd,gBAAQ,MAAM,8BAA8BA,MAAK;AACjD,iBAASA,kBAAiB,QAAQA,OAAM,UAAU,4BAA4B;AAAA,MAAA,UAChF;AACE,mBAAW,KAAK;AAAA,MAAA;AAAA,IAClB;AAGF,oBAAA;AAAA,EAAgB,GACf,EAAE;AAEL,QAAM,sBAAsB,CAAC,eAAuB;AAClD,aAAS,oBAAoB,UAAU,EAAE;AAAA,EAAA;AAG3C,MAAI,SAAS;AACX,+BACG,OAAA,EAAI,WAAU,iDACb,UAAA,oBAAC,kBAAe,GAClB;AAAA,EAAA;AAIJ,MAAI,OAAO;AACT,+BACG,OAAA,EAAI,WAAU,oCACb,UAAA,qBAAC,OAAA,EAAI,WAAU,iCACb,UAAA;AAAA,MAAA,oBAAC,MAAA,EAAG,WAAU,wCAAuC,UAAA,4BAAwB;AAAA,MAC7E,oBAAC,KAAA,EAAE,WAAU,iBAAiB,UAAA,OAAM;AAAA,MACpC,oBAAC,KAAA,EAAE,WAAU,8BAA6B,UAAA,8CAAA,CAA2C;AAAA,IAAA,EAAA,CACvF,EAAA,CACF;AAAA,EAAA;AAIJ,SACE,qBAAA,UAAA,EACE,UAAA;AAAA,IAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,OAAM;AAAA,QACN,aAAY;AAAA,QACZ,UAAS;AAAA,MAAA;AAAA,IAAA;AAAA,wBAEV,OAAA,EAAI,WAAU,oCACb,UAAA,qBAAC,OAAA,EAAI,WAAU,qBACb,UAAA;AAAA,MAAA,oBAAC,aAAA,EAAY,kBAAiB,qBAAA,CAAqB;AAAA,MAElD,WAAW,WAAW,IACrB,qBAAC,OAAA,EAAI,WAAU,qBACb,UAAA;AAAA,QAAA,oBAAC,KAAA,EAAE,WAAU,iBAAgB,UAAA,wBAAoB;AAAA,QACjD,oBAAC,KAAA,EAAE,WAAU,8BAA6B,UAAA,6CAAA,CAA0C;AAAA,MAAA,EAAA,CACtF,IAEA,oBAAC,OAAA,EAAI,WAAU,wDAAuD,aAAU,mBAC7E,UAAA,WAAW,IAAI,CAAC,aACf;AAAA,QAAC;AAAA,QAAA;AAAA,UAEC,SAAS,MAAM,oBAAoB,SAAS,WAAW;AAAA,UACvD,WAAU;AAAA,UAEV,UAAA;AAAA,YAAA,oBAAC,MAAA,EAAG,WAAU,4CACX,UAAA,SAAS,eACZ;AAAA,YACA,qBAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,cAAA,qBAAC,KAAA,EAAE,WAAU,iBACV,UAAA;AAAA,gBAAA,SAAS;AAAA,gBAAc;AAAA,gBAAE,SAAS,kBAAkB,IAAI,YAAY;AAAA,cAAA,GACvE;AAAA,cACA,qBAAC,KAAA,EAAE,WAAU,iBACV,UAAA;AAAA,gBAAA,SAAS;AAAA,gBAAe;AAAA,gBAAE,SAAS,mBAAmB,IAAI,aAAa;AAAA,cAAA,EAAA,CAC1E;AAAA,YAAA,EAAA,CACF;AAAA,UAAA;AAAA,QAAA;AAAA,QAdK,SAAS;AAAA,MAAA,CAgBjB,EAAA,CACH;AAAA,IAAA,EAAA,CAEJ,EAAA,CACF;AAAA,EAAA,GACF;AAEJ;"}