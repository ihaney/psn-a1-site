{"version":3,"file":"CountriesListPage-CnHHRQCl.js","sources":["../../../src/pages/CountriesListPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport SEO from '../components/SEO';\nimport { supabase } from '../lib/supabase';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport Breadcrumbs from '../components/Breadcrumbs';\n\ninterface CountryListItem {\n  Country_ID: string;\n  Country_Title: string;\n  Country_Image: string | null;\n  product_count: number;\n  supplier_count: number;\n}\n\nexport default function CountriesListPage() {\n  const [countries, setCountries] = useState<CountryListItem[]>([]);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchCountries() {\n      try {\n        const { data: countriesData, error: countriesError } = await supabase\n          .from('Countries')\n          .select('Country_ID, Country_Title, Country_Image');\n\n        if (countriesError) throw countriesError;\n\n        const countriesWithCounts = await Promise.all(\n          (countriesData || []).map(async (country) => {\n            const [{ count: productCount }, { count: supplierCount }] = await Promise.all([\n              supabase\n                .from('Products')\n                .select('*', { count: 'exact', head: true })\n                .eq('Product_Country_ID', country.Country_ID),\n              supabase\n                .from('Supplier')\n                .select('*', { count: 'exact', head: true })\n                .eq('Supplier_Country_ID', country.Country_ID)\n            ]);\n\n            return {\n              ...country,\n              product_count: productCount || 0,\n              supplier_count: supplierCount || 0\n            };\n          })\n        );\n\n        setCountries(countriesWithCounts);\n      } catch (error) {\n        console.error('Error fetching countries:', error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchCountries();\n  }, []);\n\n  const handleCountryClick = (countryId: string) => {\n    navigate(`/search?country=${countryId}`);\n  };\n\n  const totalProducts = countries.reduce((sum, country) => sum + country.product_count, 0);\n  const totalSuppliers = countries.reduce((sum, country) => sum + country.supplier_count, 0);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <SEO \n        title=\"Latin American Countries\"\n        description={`Explore products and suppliers from ${countries.length} Latin American countries. Browse ${totalProducts.toLocaleString()} products from ${totalSuppliers.toLocaleString()} verified suppliers.`}\n        keywords={`Latin American countries, ${countries.map(c => c.Country_Title).join(', ')}, international trade, B2B marketplace`}\n      />\n      <div className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <Breadcrumbs currentPageTitle=\"Countries\" />\n\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n            {countries.map((country) => (\n              <div\n                key={country.Country_ID}\n                onClick={() => handleCountryClick(country.Country_ID)}\n                className=\"bg-gray-800/50 backdrop-blur-sm rounded-lg p-6 cursor-pointer hover:bg-gray-700/50 transition-all\"\n              >\n                <div className=\"flex items-center gap-4 mb-4\">\n                  {country.Country_Image && (\n                    <img\n                      src={country.Country_Image}\n                      alt={country.Country_Title}\n                      className=\"w-12 h-12 object-contain rounded-full\"\n                    />\n                  )}\n                  <h2 className=\"text-xl font-semibold text-gray-100\">\n                    {country.Country_Title}\n                  </h2>\n                </div>\n                <div className=\"space-y-1\">\n                  <p className=\"text-sm text-gray-400\">\n                    {country.product_count} {country.product_count === 1 ? 'product' : 'products'}\n                  </p>\n                  <p className=\"text-sm text-gray-400\">\n                    {country.supplier_count} {country.supplier_count === 1 ? 'supplier' : 'suppliers'}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}"],"names":[],"mappings":"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"}