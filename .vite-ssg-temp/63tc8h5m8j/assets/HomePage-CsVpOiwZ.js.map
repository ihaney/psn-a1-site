{"version":3,"file":"HomePage-CsVpOiwZ.js","sources":["../../../src/components/Hero.tsx","../../../src/pages/HomePage.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { Search, Package, Building2 } from 'lucide-react';\nimport { analytics } from '../lib/analytics';\nimport { useNavigate } from 'react-router-dom';\nimport { productsIndex, suppliersIndex } from '../lib/meilisearch';\nimport { supabase } from '../lib/supabase';\nimport { useDebouncedValue } from '../hooks/useDebouncedValue';\nimport LoadingSpinner from './LoadingSpinner';\nimport { logError } from '../lib/errorLogging';\nimport { logSearchQuery } from '../lib/searchLogger';\nimport { createSupplierUrl } from '../utils/urlHelpers';\nimport { isBrowser } from '../lib/isomorphic-helpers';\n\ninterface SearchResult {\n  id: string;\n  name: string;\n  type: 'product' | 'supplier';\n  image?: string;\n  country?: string;\n  category?: string;\n  supplier?: string;\n  marketplace?: string;\n  price?: string;\n  moq?: string;\n  product_count?: number;\n  description?: string;\n  location?: string;\n  sourceId?: string;\n  sourceTitle?: string;\n  url: string;\n}\n\n// Helper function to get saved search mode from localStorage\nfunction getSavedSearchMode(): 'products' | 'suppliers' {\n  if (!isBrowser) return 'products';\n  \n  try {\n    const saved = localStorage.getItem('paisan_search_mode');\n    return saved === 'suppliers' ? 'suppliers' : 'products';\n  } catch {\n    return 'products';\n  }\n}\n\n// Helper function to save search mode to localStorage\nfunction saveSearchMode(mode: 'products' | 'suppliers') {\n  if (!isBrowser) return;\n  \n  try {\n    localStorage.setItem('paisan_search_mode', mode);\n  } catch {\n    // Silently fail if localStorage is not available\n  }\n}\n\nexport default function Hero() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchMode, setSearchMode] = useState<'products' | 'suppliers'>(getSavedSearchMode);\n  const [results, setResults] = useState<SearchResult[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [totalProducts, setTotalProducts] = useState<number | null>(null);\n  const [totalSuppliers, setTotalSuppliers] = useState<number | null>(null);\n  const [statsError, setStatsError] = useState<string | null>(null);\n  const navigate = useNavigate();\n  const debouncedQuery = useDebouncedValue(searchQuery, 300);\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      setStatsError(null);\n      try {\n        // Fetch products count with error handling\n        const productsResponse = await supabase\n          .from('Products')\n          .select('Product_ID', { count: 'estimated', head: true });\n        \n        if (productsResponse.error) {\n          console.error('Error fetching products count:', productsResponse.error);\n          setStatsError('Unable to load product statistics');\n          return;\n        }\n        \n        // Fetch suppliers count with error handling\n        const suppliersResponse = await supabase\n          .from('Supplier')\n          .select('Supplier_ID', { count: 'estimated', head: true });\n        \n        if (suppliersResponse.error) {\n          console.error('Error fetching suppliers count:', suppliersResponse.error);\n          setStatsError('Unable to load supplier statistics');\n          return;\n        }\n\n        setTotalProducts(productsResponse.count || 0);\n        setTotalSuppliers(suppliersResponse.count || 0);\n      } catch (error) {\n        console.error('Error fetching stats:', error);\n        setStatsError('Unable to load statistics');\n      }\n    };\n\n    fetchStats();\n  }, []);\n\n  // Save search mode to localStorage whenever it changes\n  useEffect(() => {\n    saveSearchMode(searchMode);\n  }, [searchMode]);\n\n  // Perform search when debounced query changes\n  useEffect(() => {\n    async function performSearch() {\n      if (!debouncedQuery.trim()) {\n        setResults([]);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        let searchResults: SearchResult[] = [];\n\n        if (searchMode === 'products') {\n          // Search products\n          const productsResults = await productsIndex.search(debouncedQuery, {\n            limit: 1, // Limit to 1 result for the dropdown\n            attributesToRetrieve: [\n              'id',\n              'title',\n              'price',\n              'image',\n              'url',\n              'moq',\n              'country',\n              'category',\n              'supplier',\n              'source'\n            ]\n          });\n\n          searchResults = productsResults.hits.map(hit => ({\n            id: hit.id as string,\n            name: hit.title as string,\n            type: 'product' as const,\n            image: hit.image as string || '',\n            country: hit.country as string || 'Unknown',\n            category: hit.category as string || 'Unknown',\n            supplier: hit.supplier as string || 'Unknown',\n            marketplace: hit.source as string || 'Unknown',\n            price: hit.price as string,\n            moq: hit.moq as string || 'N/A',\n            url: `/product/${hit.id}`\n          }));\n        } else {\n          // Search suppliers\n          const suppliersResults = await suppliersIndex.search(debouncedQuery, {\n            limit: 1, // Limit to 1 result for the dropdown\n            attributesToRetrieve: [\n              'Supplier_ID',\n              'Supplier_Title',\n              'Supplier_Description',\n              'Supplier_Country_Name',\n              'Supplier_City_Name',\n              'Supplier_Location',\n              'Supplier_Source_ID',\n              'product_count',\n              'product_keywords'\n            ]\n          });\n\n          // Extract unique source IDs for batch fetching\n          const sourceIds = [...new Set(\n            suppliersResults.hits\n              .map(hit => hit.Supplier_Source_ID as string)\n              .filter(Boolean)\n          )];\n\n          // Fetch source titles from Supabase\n          let sourceTitles: Record<string, string> = {};\n          if (sourceIds.length > 0) {\n            try {\n              const { data: sourcesData, error: sourcesError } = await supabase\n                .from('Sources')\n                .select('Source_ID, Source_Title')\n                .in('Source_ID', sourceIds);\n\n              if (sourcesError) {\n                console.error('Error fetching sources:', sourcesError);\n              } else if (sourcesData) {\n                sourceTitles = sourcesData.reduce((acc, source) => {\n                  acc[source.Source_ID] = source.Source_Title;\n                  return acc;\n                }, {} as Record<string, string>);\n              }\n            } catch (err) {\n              console.error('Error in source fetch:', err);\n            }\n          }\n\n          searchResults = suppliersResults.hits.map(hit => ({\n            id: hit.Supplier_ID as string,\n            name: hit.Supplier_Title as string,\n            type: 'supplier' as const,\n            country: hit.Supplier_Country_Name as string || 'Unknown',\n            location: hit.Supplier_Location as string || hit.Supplier_City_Name as string || 'Unknown',\n            description: hit.Supplier_Description as string || '',\n            product_count: hit.product_count as number || 0,\n            sourceId: hit.Supplier_Source_ID as string || '',\n            sourceTitle: sourceTitles[hit.Supplier_Source_ID as string] || 'Unknown Source',\n            productKeywords: hit.product_keywords as string || '',\n            url: createSupplierUrl(hit.Supplier_Title as string, hit.Supplier_ID as string)\n          }));\n        }\n\n        setResults(searchResults);\n\n        if (!searchResults.length && debouncedQuery.length > 2) {\n          logError(new Error('Hero search returned no results'), {\n            type: 'hero_search_no_results',\n            query: debouncedQuery,\n            mode: searchMode\n          }, 'warning');\n        }\n      } catch (err) {\n        console.error('Search error:', err);\n        logError(err instanceof Error ? err : new Error('Hero search failed'), {\n          type: 'hero_search_error',\n          query: debouncedQuery,\n          mode: searchMode\n        });\n        setResults([]);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    performSearch();\n  }, [debouncedQuery, searchMode]);\n\n  const handleSearch = useCallback((e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      analytics.trackEvent('hero_search_submit', {\n        props: { \n          query: searchQuery,\n          mode: searchMode\n        }\n      });\n      \n      // Log the search query\n      logSearchQuery(searchQuery.trim(), searchMode);\n      \n      const searchParams = new URLSearchParams({\n        q: searchQuery.trim(),\n        mode: searchMode\n      });\n      navigate(`/search?${searchParams.toString()}`);\n    }\n  }, [searchQuery, navigate, searchMode]);\n\n  const handleResultClick = (result: SearchResult) => {\n    analytics.trackEvent('hero_search_result_click', {\n      props: { \n        result_id: result.id,\n        result_name: result.name,\n        result_type: result.type,\n        query: searchQuery\n      }\n    });\n    \n    // Log the search query when clicking a result\n    logSearchQuery(searchQuery.trim(), searchMode);\n    \n    navigate(result.url);\n    setSearchQuery('');\n    setResults([]);\n  };\n\n  const handleSearchModeChange = (mode: 'products' | 'suppliers') => {\n    setSearchMode(mode);\n    analytics.trackEvent('hero_search_mode_change', {\n      props: { mode }\n    });\n  };\n\n  return (\n    <div className=\"relative overflow-hidden bg-black\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"relative z-10 pb-8 sm:pb-16 md:pb-20 lg:w-full lg:pb-28 xl:pb-32 pt-32\">\n          <main className=\"mt-10 mx-auto max-w-7xl px-4 sm:mt-12 sm:px-6 md:mt-16 lg:mt-20 lg:px-8 xl:mt-28\">\n            <div className=\"text-center\">\n              <h1 className=\"text-4xl tracking-tight font-extrabold text-gray-100 sm:text-5xl md:text-6xl\">\n                <span className=\"block\">Discover</span>\n                <span className=\"block text-[#F4A024]\">Latin American Products</span>\n              </h1>\n              <p className=\"mt-3 text-base text-gray-300 sm:mt-5 sm:text-lg sm:max-w-xl sm:mx-auto md:mt-5 md:text-xl\">\n                We connect Latin American suppliers with global markets.\n              </p>\n              \n              <div className=\"mt-8 sm:mt-12 flex justify-center px-4\">\n                <form onSubmit={handleSearch} className=\"w-full max-w-2xl\">\n                  {/* Search Mode Toggle */}\n                  <div className=\"flex justify-center gap-2 mb-4\">\n                    <button\n                      type=\"button\"\n                      onClick={() => handleSearchModeChange('suppliers')}\n                      className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${\n                        searchMode === 'suppliers'\n                          ? 'bg-[#F4A024] text-gray-900'\n                          : 'bg-white/10 text-gray-300 hover:bg-white/20'\n                      }`}\n                    >\n                      <Building2 className=\"w-4 h-4\" />\n                      Suppliers\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => handleSearchModeChange('products')}\n                      className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${\n                        searchMode === 'products'\n                          ? 'bg-[#F4A024] text-gray-900'\n                          : 'bg-white/10 text-gray-300 hover:bg-white/20'\n                      }`}\n                    >\n                      <Package className=\"w-4 h-4\" />\n                      Products\n                    </button>\n                  </div>\n                  \n                  <div className=\"relative\">\n                    <div className=\"absolute left-4 top-1/2 -translate-y-1/2 z-10\">\n                      <Search className=\"w-5 h-5 text-[#F4A024]\" />\n                    </div>\n                    <input\n                      type=\"text\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      placeholder={searchMode === 'products' \n                        ? \"Search products, categories, suppliers...\" \n                        : \"Search suppliers by name, location, capabilities...\"}\n                      className=\"w-full px-12 py-4 bg-white/10 hover:bg-white/20 focus:bg-white/20 rounded-lg text-gray-100 placeholder-gray-400 outline-none ring-1 ring-gray-700 focus:ring-[#F4A024] transition-all duration-200\"\n                    />\n                    \n                    {searchQuery && (\n                      <div className=\"absolute left-0 right-0 mt-2 bg-gray-800/95 backdrop-blur-sm rounded-lg shadow-lg overflow-hidden\">\n                        {loading ? (\n                          <div className=\"text-center py-4\">\n                            <LoadingSpinner />\n                          </div>\n                        ) : results.length > 0 ? (\n                          <div>\n                            {results.slice(0, 1).map((result) => (\n                              <button\n                                key={`${result.type}-${result.id}`}\n                                onClick={() => handleResultClick(result)}\n                                className=\"w-full text-left px-4 py-4 hover:bg-gray-700/50 transition-colors\"\n                              >\n                                <div className=\"flex items-center gap-4\">\n                                  {result.type === 'product' && result.image && (\n                                    <img\n                                      src={result.image}\n                                      alt={result.name}\n                                      className=\"w-16 h-16 object-cover rounded\"\n                                    />\n                                  )}\n                                  {result.type === 'supplier' && (\n                                    <div className=\"w-16 h-16 bg-[#F4A024]/10 rounded-lg flex items-center justify-center\">\n                                      <Building2 className=\"w-8 h-8 text-[#F4A024]\" />\n                                    </div>\n                                  )}\n                                  <div className=\"flex-1 min-w-0\">\n                                    <h3 className=\"font-medium text-white truncate\">{result.name}</h3>\n                                    {result.type === 'product' ? (\n                                      <div className=\"flex gap-2 text-sm text-gray-400\">\n                                        <span className=\"truncate\">{result.category}</span>\n                                        <span>•</span>\n                                        <span>{result.price}</span>\n                                      </div>\n                                    ) : (\n                                      <div className=\"flex gap-2 text-sm text-gray-400\">\n                                        <span className=\"text-[#F4A024]\">Supplier</span>\n                                        <span>•</span>\n                                        <span>{result.country}</span>\n                                        {result.product_count !== undefined && (\n                                          <>\n                                            <span>•</span>\n                                            <span>{result.product_count} products</span>\n                                          </>\n                                        )}\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                              </button>\n                            ))}\n                          </div>\n                        ) : (\n                          <p className=\"text-gray-400 text-sm p-4\">\n                            No {searchMode} found. Try different keywords or browse categories.\n                          </p>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </form>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport SEO from '../components/SEO';\nimport Hero from '../components/Hero';\nimport { Building2, Users, Globe2, Database, UserCheck } from 'lucide-react';\nimport { supabase } from '../lib/supabase';\n\nexport default function HomePage() {\n  const [metrics, setMetrics] = useState({\n    suppliers: 0,\n    products: 0,\n    sources: 0\n  });\n\n  // Function to format numbers to nearest 500 with K suffix\n  const formatMetricNumber = (num: number): string => {\n    if (num < 1000) {\n      return num.toString();\n    }\n    \n    // Round to nearest 500\n    const rounded = Math.round(num / 500) * 500;\n    \n    if (rounded >= 1000) {\n      const kValue = rounded / 1000;\n      // If it's a whole number, show without decimal\n      if (kValue % 1 === 0) {\n        return `${kValue}K`;\n      } else {\n        // Show one decimal place\n        return `${kValue.toFixed(1)}K`;\n      }\n    }\n    \n    return rounded.toString();\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        console.log('Fetching metrics...');\n        \n        const [suppliersCount, productsCount, sourcesCount] = await Promise.all([\n          supabase.from('Supplier').select('*', { count: 'estimated', head: true }),\n          supabase.from('Products').select('*', { count: 'estimated', head: true }),\n          supabase.from('Sources').select('*', { count: 'estimated', head: true })\n        ]);\n\n        console.log('Metrics results:', { suppliersCount, productsCount, sourcesCount });\n\n        setMetrics({\n          suppliers: suppliersCount.count || 0,\n          products: productsCount.count || 0,\n          sources: sourcesCount.count || 0\n        });\n      } catch (error) {\n        console.error('Error fetching metrics:', error);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  // Debug logging\n  console.log('HomePage render:', { \n    metrics \n  });\n\n  return (\n    <>\n      <SEO \n        title=\"Latin American Products Marketplace\"\n        description=\"Discover authentic Latin American products and connect with trusted suppliers. Find wholesale products from Mexico, Colombia, Brazil and more.\"\n        keywords=\"Latin American marketplace, wholesale products, B2B marketplace, Mexican products, Colombian products, Brazilian products\"\n      />\n      <Hero />\n      <main className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"space-y-12\">\n          {/* Platform Description and Metrics Section */}\n          <div className=\"py-16 border-t border-gray-800\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-6xl font-bold paisan-text text-[#F4A024] mb-4\">\n                Paisán\n              </h2>\n              <p className=\"text-2xl text-gray-300 mb-8\">\n                A Trusted Sourcing Tool\n              </p>\n              <p className=\"text-lg text-gray-400 max-w-3xl mx-auto\">\n                Simplifying sourcing across Latin America by providing comprehensive supplier and product data.\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"inline-flex items-center justify-center w-12 h-12 bg-[#F4A024]/10 rounded-lg mb-4\">\n                  <Building2 className=\"w-6 h-6 text-[#F4A024]\" />\n                </div>\n                <div className=\"text-3xl font-bold text-[#F4A024] mb-2\">\n                  {formatMetricNumber(metrics.suppliers)}+\n                </div>\n                <div className=\"text-gray-400\">Suppliers</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"inline-flex items-center justify-center w-12 h-12 bg-[#F4A024]/10 rounded-lg mb-4\">\n                  <Users className=\"w-6 h-6 text-[#F4A024]\" />\n                </div>\n                <div className=\"text-3xl font-bold text-[#F4A024] mb-2\">\n                  {formatMetricNumber(metrics.products)}+\n                </div>\n                <div className=\"text-gray-400\">Products</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"inline-flex items-center justify-center w-12 h-12 bg-[#F4A024]/10 rounded-lg mb-4\">\n                  <Database className=\"w-6 h-6 text-[#F4A024]\" />\n                </div>\n                <div className=\"text-3xl font-bold text-[#F4A024] mb-2\">\n                  {formatMetricNumber(metrics.sources)}+\n                </div>\n                <div className=\"text-gray-400\">Sources</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"inline-flex items-center justify-center w-12 h-12 bg-[#F4A024]/10 rounded-lg mb-4\">\n                  <UserCheck className=\"w-6 h-6 text-[#F4A024]\" />\n                </div>\n                <div className=\"text-3xl font-bold text-[#F4A024] mb-2\">5M+</div>\n                <div className=\"text-gray-400\">Monthly Audience</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </>\n  );\n}"],"names":[],"mappings":"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"}