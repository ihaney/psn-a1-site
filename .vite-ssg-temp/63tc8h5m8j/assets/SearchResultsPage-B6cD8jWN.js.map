{"version":3,"file":"SearchResultsPage-B6cD8jWN.js","sources":["../../../src/components/SupplierCard.tsx","../../../src/pages/SearchResultsPage.tsx"],"sourcesContent":["import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Building2, MapPin, Package } from 'lucide-react';\nimport { analytics } from '../lib/analytics';\nimport { createSupplierUrl } from '../utils/urlHelpers';\n\ninterface Supplier {\n  Supplier_ID: string;\n  Supplier_Title: string;\n  Supplier_Description?: string;\n  Supplier_Country_Name?: string;\n  Supplier_City_Name?: string;\n  Supplier_Location?: string;\n  product_keywords?: string;\n}\n\ninterface SupplierCardProps {\n  supplier: Supplier;\n}\n\nexport default function SupplierCard({ supplier }: SupplierCardProps) {\n  const navigate = useNavigate();\n\n  const handleClick = () => {\n    // Track analytics\n    analytics.trackEvent('supplier_click', {\n      props: {\n        supplier_id: supplier.Supplier_ID,\n        supplier_name: supplier.Supplier_Title,\n        supplier_country: supplier.Supplier_Country_Name || 'Unknown'\n      }\n    });\n\n    navigate(createSupplierUrl(supplier.Supplier_Title, supplier.Supplier_ID));\n  };\n\n  return (\n    <div \n      className=\"group cursor-pointer bg-gray-800/50 backdrop-blur-sm rounded-lg p-6 hover:bg-gray-700/50 transition-all duration-200\"\n      onClick={handleClick}\n    >\n      <div className=\"flex items-start gap-4\">\n        <div className=\"flex-shrink-0\">\n          <div className=\"w-12 h-12 bg-[#F4A024]/10 rounded-lg flex items-center justify-center group-hover:bg-[#F4A024]/20 transition-colors\">\n            <Building2 className=\"w-6 h-6 text-[#F4A024]\" />\n          </div>\n        </div>\n        \n        <div className=\"flex-1 min-w-0\">\n          <h3 className=\"text-lg font-semibold text-gray-100 mb-2 group-hover:text-[#F4A024] transition-colors\">\n            {supplier.Supplier_Title}\n          </h3>\n          \n          {supplier.Supplier_Description && (\n            <p className=\"text-gray-300 text-sm mb-3 line-clamp-2 leading-relaxed\">\n              {supplier.Supplier_Description}\n            </p>\n          )}\n          \n          <div className=\"flex flex-wrap gap-3 text-sm text-gray-400\">\n            {(supplier.Supplier_Country_Name || supplier.Supplier_Location) && (\n              <div className=\"flex items-center gap-1\">\n                <MapPin className=\"w-4 h-4\" />\n                <span>\n                  {supplier.Supplier_Location || \n                   `${supplier.Supplier_City_Name ? supplier.Supplier_City_Name + ', ' : ''}${supplier.Supplier_Country_Name}`}\n                </span>\n              </div>\n            )}\n            \n          </div>\n          \n          {supplier.product_keywords && (\n            <div className=\"mt-3\">\n              <p className=\"text-xs text-gray-500 line-clamp-1\">\n                Keywords: {supplier.product_keywords}\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","import React, { useEffect, useState } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport SEO from '../components/SEO';\nimport { supabase } from '../lib/supabase';\nimport { productsIndex, suppliersIndex } from '../lib/meilisearch';\nimport ProductCard from '../components/ProductCard';\nimport SupplierCard from '../components/SupplierCard';\nimport StandardFilters from '../components/StandardFilters';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport Breadcrumbs from '../components/Breadcrumbs';\nimport type { Product } from '../types';\nimport { logError } from '../lib/errorLogging';\nimport { logSearchQuery } from '../lib/searchLogger';\nimport { analytics } from '../lib/analytics';\nimport { Package, Building2 } from 'lucide-react';\n\ninterface FilterOption {\n  id: string;\n  title: string;\n  count: number;\n}\n\ninterface FilterGroup {\n  title: string;\n  options: FilterOption[];\n  selected: string[];\n}\n\ninterface Supplier {\n  Supplier_ID: string;\n  Supplier_Title: string;\n  Supplier_Description?: string;\n  Supplier_Country_Name?: string;\n  Supplier_City_Name?: string;\n  Supplier_Location?: string;\n  product_count?: number;\n  product_keywords?: string;\n  sourceTitle?: string;\n}\n\nexport default function SearchResultsPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const query = searchParams.get('q') || '';\n  const mode = searchParams.get('mode') || 'products';\n  const categoryId = searchParams.get('category');\n  const source = searchParams.get('source');\n  const country = searchParams.get('country');\n  \n  const [results, setResults] = useState<(Product | Supplier)[]>([]);\n  const [allProducts, setAllProducts] = useState<Product[]>([]);\n  const [allSuppliers, setAllSuppliers] = useState<Supplier[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [totalCount, setTotalCount] = useState<number>(0);\n  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);\n  const [categoryName, setCategoryName] = useState<string>('');\n  const [sourceName, setSourceName] = useState<string>('');\n  const [countryName, setCountryName] = useState<string>('');\n  const [sortBy, setSortBy] = useState('');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');\n  const [suggestedSearches, setSuggestedSearches] = useState<string[]>([]);\n  const [currentDisplayMode, setCurrentDisplayMode] = useState<'products' | 'suppliers'>(\n    mode === 'suppliers' ? 'suppliers' : 'products'\n  );\n  const queryClient = useQueryClient();\n  \n  const [filters, setFilters] = useState<{\n    categories: FilterGroup;\n    suppliers: FilterGroup;\n    sources: FilterGroup;\n    countries: FilterGroup;\n  }>({\n    categories: { title: 'Categories', options: [], selected: [] },\n    suppliers: { title: 'Suppliers', options: [], selected: [] },\n    sources: { title: 'Sources', options: [], selected: [] },\n    countries: { title: 'Countries', options: [], selected: [] }\n  });\n\n  // Infinite scroll state\n  const [currentPage, setCurrentPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [loadingMore, setLoadingMore] = useState(false);\n  const ITEMS_PER_PAGE = 100;\n\n  // Use react-query to fetch search results\n  const { data: searchData, isLoading: searchLoading, error: searchError } = useQuery({\n    queryKey: ['searchResults', { \n      query, \n      mode: currentDisplayMode, \n      categoryId, \n      source, \n      country \n    }],\n    queryFn: async () => {\n      // This function will be called when the query key changes\n      // or when the data is stale\n      \n      let productsData: any[] = [];\n      let suppliersData: any[] = [];\n      let productsCount = 0;\n      let suppliersCount = 0;\n\n      // Fetch products data\n      if (currentDisplayMode === 'products') {\n        if (source) {\n          const { data, error, count } = await supabase\n            .from('Products')\n            .select(`\n              Product_ID,\n              Product_Title,\n              Product_Price,\n              Product_Image_URL,\n              Product_URL,\n              Product_MOQ,\n              Product_Country_Name,\n              Product_Category_Name,\n              Product_Supplier_Name,\n              Product_Source_Name\n            `, { count: 'exact' })\n            .eq('Product_Source_ID', source)\n            .order('Product_ID')\n            .limit(ITEMS_PER_PAGE);\n\n          if (error) throw error;\n          productsData = data || [];\n          productsCount = count || 0;\n        } else if (categoryId) {\n          const { data, error, count } = await supabase\n            .from('Products')\n            .select(`\n              Product_ID,\n              Product_Title,\n              Product_Price,\n              Product_Image_URL,\n              Product_URL,\n              Product_MOQ,\n              Product_Country_Name,\n              Product_Category_Name,\n              Product_Supplier_Name,\n              Product_Source_Name\n            `, { count: 'exact' })\n            .eq('Product_Category_ID', categoryId)\n            .order('Product_ID')\n            .limit(ITEMS_PER_PAGE);\n\n          if (error) throw error;\n          productsData = data || [];\n          productsCount = count || 0;\n        } else if (country) {\n          const { data, error, count } = await supabase\n            .from('Products')\n            .select(`\n              Product_ID,\n              Product_Title,\n              Product_Price,\n              Product_Image_URL,\n              Product_URL,\n              Product_MOQ,\n              Product_Country_Name,\n              Product_Category_Name,\n              Product_Supplier_Name,\n              Product_Source_Name\n            `, { count: 'exact' })\n            .eq('Product_Country_ID', country)\n            .order('Product_ID')\n            .limit(ITEMS_PER_PAGE);\n\n          if (error) throw error;\n          productsData = data || [];\n          productsCount = count || 0;\n        } else if (query) {\n          const searchResults = await productsIndex.search(query, {\n            limit: ITEMS_PER_PAGE,\n            facets: ['supplier', 'source', 'country']\n          });\n\n          productsData = searchResults.hits;\n          productsCount = searchResults.estimatedTotalHits || 0;\n        }\n      }\n      \n      // Fetch suppliers data\n      if (currentDisplayMode === 'suppliers') {\n        if (query) {\n          const searchResults = await suppliersIndex.search(query, {\n            limit: ITEMS_PER_PAGE,\n            facets: ['Supplier_Country_Name', 'Supplier_Source_ID']\n          });\n\n          suppliersData = searchResults.hits;\n          suppliersCount = searchResults.estimatedTotalHits || 0;\n        } else if (country) {\n          const { data, error, count } = await supabase\n            .from('Supplier')\n            .select(`\n              Supplier_ID,\n              Supplier_Title,\n              Supplier_Description,\n              Supplier_Location,\n              Supplier_Country_Name,\n              Supplier_City_Name,\n              Supplier_Source_ID\n            `, { count: 'exact' })\n            .eq('Supplier_Country_ID', country)\n            .order('Supplier_Title')\n            .limit(ITEMS_PER_PAGE);\n\n          if (error) throw error;\n          suppliersData = data || [];\n          suppliersCount = count || 0;\n        } else if (source) {\n          const { data, error, count } = await supabase\n            .from('Supplier')\n            .select(`\n              Supplier_ID,\n              Supplier_Title,\n              Supplier_Description,\n              Supplier_Location,\n              Supplier_Country_Name,\n              Supplier_City_Name,\n              Supplier_Source_ID\n            `, { count: 'exact' })\n            .eq('Supplier_Source_ID', source)\n            .order('Supplier_Title')\n            .limit(ITEMS_PER_PAGE);\n\n          if (error) throw error;\n          suppliersData = data || [];\n          suppliersCount = count || 0;\n        }\n      }\n      \n      return {\n        productsData,\n        suppliersData,\n        productsCount,\n        suppliersCount\n      };\n    },\n    staleTime: 1000 * 60 * 5 // 5 minutes\n  });\n\n  // Generate product-centric search suggestions\n  const generateSuggestions = (results: (Product | Supplier)[], searchQuery: string, searchMode: string) => {\n    if (!results.length || !searchQuery.trim()) {\n      setSuggestedSearches([]);\n      return;\n    }\n\n    const suggestions = new Set<string>();\n    const queryLower = searchQuery.toLowerCase();\n\n    if (searchMode === 'products') {\n      // Enhanced product-centric suggestions\n      const materialTerms = new Set<string>();\n      const applicationTerms = new Set<string>();\n      const categoryTerms = new Set<string>();\n\n      // Define material keywords to look for - EXPANDED LIST\n      const materialKeywords = [\n        // Metals\n        'aluminum', 'steel', 'iron', 'copper', 'brass', 'bronze', 'titanium', 'zinc',\n        'stainless', 'carbon', 'alloy', 'metal', 'metallic', 'chrome', 'silver', 'gold',\n        'nickel', 'tin', 'lead', 'magnesium', 'tungsten',\n        \n        // Plastics and Polymers\n        'plastic', 'polymer', 'pvc', 'polyethylene', 'polypropylene', 'acrylic', 'nylon',\n        'abs', 'polycarbonate', 'vinyl', 'resin', 'fiberglass', 'composite',\n        \n        // Natural Materials\n        'wood', 'bamboo', 'cotton', 'leather', 'wool', 'silk', 'linen', 'jute', 'hemp',\n        'rubber', 'silicone', 'ceramic', 'glass', 'stone', 'marble', 'granite',\n        \n        // Textiles\n        'fabric', 'textile', 'polyester', 'denim', 'canvas', 'felt', 'fleece', 'velvet',\n        'satin', 'suede', 'microfiber', 'mesh',\n        \n        // Paper Products\n        'paper', 'cardboard', 'paperboard', 'corrugated',\n        \n        // Construction Materials\n        'concrete', 'cement', 'brick', 'tile', 'grout', 'drywall', 'plywood', 'lumber',\n        'insulation', 'asphalt', 'gypsum'\n      ];\n\n      // Define application/use keywords - EXPANDED LIST\n      const applicationKeywords = [\n        // Industries\n        'industrial', 'automotive', 'construction', 'medical', 'electronic', 'electrical',\n        'agricultural', 'aerospace', 'marine', 'military', 'commercial', 'residential',\n        'manufacturing', 'mining', 'oil', 'gas', 'chemical', 'pharmaceutical',\n        \n        // Locations\n        'kitchen', 'bathroom', 'bedroom', 'living', 'office', 'garage', 'garden', 'outdoor',\n        'indoor', 'home', 'school', 'hospital', 'restaurant', 'hotel', 'retail',\n        \n        // Functions\n        'packaging', 'storage', 'transport', 'safety', 'security', 'cleaning', 'heating',\n        'cooling', 'lighting', 'plumbing', 'ventilation', 'insulation', 'decoration',\n        'protection', 'measurement', 'monitoring', 'control', 'automation', 'communication',\n        \n        // Product Types\n        'tool', 'machine', 'equipment', 'device', 'system', 'component', 'accessory',\n        'furniture', 'appliance', 'instrument', 'container', 'vehicle', 'clothing',\n        'footwear', 'hardware', 'software', 'supply', 'part', 'assembly'\n      ];\n\n      // Product attributes\n      const attributeKeywords = [\n        'portable', 'handheld', 'wireless', 'rechargeable', 'disposable', 'reusable',\n        'adjustable', 'foldable', 'collapsible', 'expandable', 'modular', 'customizable',\n        'waterproof', 'weatherproof', 'fireproof', 'shockproof', 'dustproof', 'rustproof',\n        'lightweight', 'heavy-duty', 'high-capacity', 'high-performance', 'energy-efficient',\n        'eco-friendly', 'biodegradable', 'organic', 'natural', 'synthetic', 'handmade',\n        'digital', 'smart', 'automatic', 'manual', 'mechanical', 'hydraulic', 'pneumatic',\n        'electric', 'solar', 'battery-powered', 'cordless', 'corded'\n      ];\n\n      (results as Product[]).forEach(product => {\n        const productName = product.name.toLowerCase();\n        const category = product.category.toLowerCase();\n\n        // Extract material terms\n        materialKeywords.forEach(material => {\n          if (productName.includes(material) && !queryLower.includes(material)) {\n            materialTerms.add(material);\n          }\n        });\n\n        // Extract application terms\n        applicationKeywords.forEach(application => {\n          if (productName.includes(application) && !queryLower.includes(application)) {\n            applicationTerms.add(application);\n          }\n        });\n\n        // Add relevant categories (but filter out generic ones)\n        if (category !== 'unknown' && \n            !category.includes(queryLower) && \n            !queryLower.includes(category) &&\n            category.length > 3) {\n          categoryTerms.add(product.category);\n        }\n\n        // Extract specific product terms from names\n        const words = productName.split(/[\\s\\-_,\\.()]+/)\n          .filter(word => \n            word.length > 3 && \n            word.length < 15 && // Avoid very long words\n            !word.includes(queryLower) && \n            !queryLower.includes(word) &&\n            // Enhanced stop words for better filtering\n            !['with', 'from', 'made', 'high', 'quality', 'premium', 'best', 'new', 'old', \n              'large', 'small', 'mini', 'micro', 'super', 'ultra', 'professional',\n              'standard', 'heavy', 'light', 'strong', 'durable', 'portable',\n              'electric', 'manual', 'automatic', 'digital', 'analog', 'this', 'that',\n              'these', 'those', 'they', 'them', 'their', 'there', 'here', 'where',\n              'when', 'what', 'which', 'who', 'whom', 'whose', 'why', 'how', 'have',\n              'has', 'had', 'does', 'did', 'doing', 'done', 'been', 'being', 'would',\n              'could', 'should', 'will', 'shall', 'may', 'might', 'must', 'can'].includes(word) &&\n            // Avoid numbers and codes\n            !/^\\d+$/.test(word) &&\n            !/^[a-z]\\d+/.test(word)\n          );\n        \n        words.forEach(word => {\n          // Check if this word appears in multiple products (relevance filter)\n          const wordCount = (results as Product[]).filter(p => \n            p.name.toLowerCase().includes(word)\n          ).length;\n          \n          if (wordCount >= 2) {\n            materialTerms.add(word);\n          }\n        });\n      });\n\n      // Prioritize suggestions by relevance\n      // 1. Material terms (most specific)\n      const sortedMaterials = Array.from(materialTerms)\n        .sort((a, b) => {\n          const countA = (results as Product[]).filter(p => p.name.toLowerCase().includes(a)).length;\n          const countB = (results as Product[]).filter(p => p.name.toLowerCase().includes(b)).length;\n          return countB - countA;\n        });\n\n      // 2. Application terms\n      const sortedApplications = Array.from(applicationTerms)\n        .sort((a, b) => {\n          const countA = (results as Product[]).filter(p => p.name.toLowerCase().includes(a)).length;\n          const countB = (results as Product[]).filter(p => p.name.toLowerCase().includes(b)).length;\n          return countB - countA;\n        });\n\n      // 3. Category terms (least priority)\n      const sortedCategories = Array.from(categoryTerms)\n        .sort((a, b) => {\n          const countA = (results as Product[]).filter(p => p.category === a).length;\n          const countB = (results as Product[]).filter(p => p.category === b).length;\n          return countB - countA;\n        });\n\n      // Add suggestions in order of priority\n      [...sortedMaterials.slice(0, 2), ...sortedApplications.slice(0, 1), ...sortedCategories.slice(0, 1)]\n        .slice(0, 3)\n        .forEach(term => {\n          const displayTerm = term.charAt(0).toUpperCase() + term.slice(1);\n          suggestions.add(displayTerm);\n        });\n\n    } else {\n      // For suppliers, focus on industry and capability terms\n      const industryTerms = new Set<string>();\n      const capabilityTerms = new Set<string>();\n      const locationTerms = new Set<string>();\n\n      // Enhanced industry keywords\n      const industryKeywords = [\n        'manufacturing', 'production', 'export', 'import', 'wholesale', 'retail',\n        'distribution', 'logistics', 'supply', 'trading', 'sourcing', 'procurement',\n        'fabrication', 'assembly', 'processing', 'packaging', 'shipping', 'consulting',\n        'engineering', 'design', 'development', 'research', 'testing', 'certification',\n        'quality', 'inspection', 'maintenance', 'repair', 'installation', 'service',\n        'textile', 'apparel', 'furniture', 'electronics', 'automotive', 'construction',\n        'agricultural', 'chemical', 'pharmaceutical', 'medical', 'food', 'beverage',\n        'cosmetic', 'plastic', 'metal', 'wood', 'paper', 'glass', 'ceramic', 'rubber'\n      ];\n\n      // Location keywords\n      const locationKeywords = [\n        'mexico', 'colombia', 'brazil', 'argentina', 'chile', 'peru', 'ecuador',\n        'venezuela', 'bolivia', 'paraguay', 'uruguay', 'panama', 'costa rica',\n        'guatemala', 'honduras', 'el salvador', 'nicaragua', 'belize', 'dominican',\n        'puerto rico', 'cuba', 'jamaica', 'haiti', 'bahamas', 'guyana', 'suriname',\n        'french guiana', 'guadalajara', 'monterrey', 'tijuana', 'cancun', 'merida',\n        'puebla', 'queretaro', 'leon', 'mexico city', 'bogota', 'medellin', 'cali',\n        'barranquilla', 'cartagena', 'sao paulo', 'rio de janeiro', 'brasilia',\n        'salvador', 'fortaleza', 'belo horizonte', 'manaus', 'curitiba'\n      ];\n\n      (results as Supplier[]).forEach(supplier => {\n        // Extract industry terms from supplier descriptions and keywords\n        if (supplier.product_keywords) {\n          const keywords = supplier.product_keywords.toLowerCase().split(/[\\s,]+/)\n            .filter(word => \n              word.length > 3 && \n              !word.includes(queryLower) && \n              !queryLower.includes(word) &&\n              !['with', 'from', 'made', 'high', 'quality', 'and', 'the', 'for', 'our', 'we', 'are'].includes(word)\n            );\n          \n          keywords.forEach(keyword => {\n            // Check if keyword is an industry term\n            if (industryKeywords.includes(keyword)) {\n              industryTerms.add(keyword);\n            } else {\n              // Otherwise add to general capability terms\n              capabilityTerms.add(keyword);\n            }\n          });\n        }\n\n        // Extract location terms\n        if (supplier.Supplier_Country_Name) {\n          const location = supplier.Supplier_Country_Name.toLowerCase();\n          locationKeywords.forEach(loc => {\n            if (location.includes(loc) && !queryLower.includes(loc)) {\n              locationTerms.add(loc);\n            }\n          });\n        }\n\n        if (supplier.Supplier_City_Name) {\n          const city = supplier.Supplier_City_Name.toLowerCase();\n          locationKeywords.forEach(loc => {\n            if (city.includes(loc) && !queryLower.includes(loc)) {\n              locationTerms.add(loc);\n            }\n          });\n        }\n\n        // Extract capability terms from supplier names and descriptions\n        if (supplier.Supplier_Description) {\n          const description = supplier.Supplier_Description.toLowerCase();\n          \n          // Check for industry keywords in description\n          industryKeywords.forEach(industry => {\n            if (description.includes(industry) && !queryLower.includes(industry)) {\n              industryTerms.add(industry);\n            }\n          });\n          \n          // Extract other meaningful words\n          const words = description.split(/[\\s\\-_,\\.]+/)\n            .filter(word => \n              word.length > 4 && \n              !word.includes(queryLower) && \n              !queryLower.includes(word) &&\n              !['with', 'from', 'made', 'high', 'quality', 'and', 'the', 'for', 'our', 'we', 'are',\n                'that', 'this', 'these', 'those', 'they', 'them', 'their', 'there', 'here', 'where',\n                'when', 'what', 'which', 'who', 'whom', 'whose', 'why', 'how', 'have', 'has', 'had'].includes(word)\n            );\n          \n          words.forEach(word => {\n            // Check if this word appears in multiple suppliers (relevance filter)\n            const wordCount = (results as Supplier[]).filter(s => \n              s.Supplier_Description?.toLowerCase().includes(word)\n            ).length;\n            \n            if (wordCount >= 2) {\n              capabilityTerms.add(word);\n            }\n          });\n        }\n      });\n\n      // Add relevant industry terms\n      const relevantIndustryTerms = Array.from(industryTerms)\n        .filter(term => {\n          const termCount = (results as Supplier[]).filter(s => \n            s.product_keywords?.toLowerCase().includes(term) || \n            s.Supplier_Description?.toLowerCase().includes(term)\n          ).length;\n          return termCount >= 2;\n        })\n        .sort((a, b) => {\n          const countA = (results as Supplier[]).filter(s => \n            s.product_keywords?.toLowerCase().includes(a) || \n            s.Supplier_Description?.toLowerCase().includes(a)\n          ).length;\n          const countB = (results as Supplier[]).filter(s => \n            s.product_keywords?.toLowerCase().includes(b) || \n            s.Supplier_Description?.toLowerCase().includes(b)\n          ).length;\n          return countB - countA;\n        });\n\n      // Add relevant location terms\n      const relevantLocationTerms = Array.from(locationTerms)\n        .sort((a, b) => {\n          const countA = (results as Supplier[]).filter(s => \n            s.Supplier_Country_Name?.toLowerCase().includes(a) || \n            s.Supplier_City_Name?.toLowerCase().includes(a) ||\n            s.Supplier_Location?.toLowerCase().includes(a)\n          ).length;\n          const countB = (results as Supplier[]).filter(s => \n            s.Supplier_Country_Name?.toLowerCase().includes(b) || \n            s.Supplier_City_Name?.toLowerCase().includes(b) ||\n            s.Supplier_Location?.toLowerCase().includes(b)\n          ).length;\n          return countB - countA;\n        });\n\n      // Add relevant capability terms\n      const relevantCapabilityTerms = Array.from(capabilityTerms)\n        .sort((a, b) => {\n          const countA = (results as Supplier[]).filter(s => \n            s.Supplier_Description?.toLowerCase().includes(a) || \n            s.product_keywords?.toLowerCase().includes(a)\n          ).length;\n          const countB = (results as Supplier[]).filter(s => \n            s.Supplier_Description?.toLowerCase().includes(b) || \n            s.product_keywords?.toLowerCase().includes(b)\n          ).length;\n          return countB - countA;\n        });\n\n      // Combine the most relevant terms from each category\n      [...relevantIndustryTerms.slice(0, 1), ...relevantLocationTerms.slice(0, 1), ...relevantCapabilityTerms.slice(0, 1)]\n        .slice(0, 3)\n        .forEach(term => {\n          const displayTerm = term.charAt(0).toUpperCase() + term.slice(1);\n          suggestions.add(displayTerm);\n        });\n    }\n\n    setSuggestedSearches(Array.from(suggestions).slice(0, 3));\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    // Log the suggested search query\n    logSearchQuery(suggestion, currentDisplayMode);\n    \n    // Navigate to a new search with the suggested term\n    const searchParams = new URLSearchParams({\n      q: suggestion,\n      mode: currentDisplayMode\n    });\n    navigate(`/search?${searchParams.toString()}`);\n  };\n\n  const handleDisplayModeToggle = (mode: 'products' | 'suppliers') => {\n    setCurrentDisplayMode(mode);\n    \n    // Update URL search params\n    const newParams = new URLSearchParams(searchParams);\n    newParams.set('mode', mode);\n    setSearchParams(newParams, { replace: true });\n    \n    // Reset pagination\n    setCurrentPage(0);\n    \n    // Update displayed results based on the new mode\n    updateDisplayedResults(mode);\n    \n    // Track the mode change\n    analytics.trackEvent('search_mode_toggle', {\n      props: { \n        mode,\n        from: currentDisplayMode,\n        query: query || '',\n        category: categoryId || '',\n        source: source || '',\n        country: country || ''\n      }\n    });\n  };\n\n  useEffect(() => {\n    async function fetchNames() {\n      if (categoryId) {\n        const { data, error } = await supabase\n          .from('Categories')\n          .select('Category_Name')\n          .eq('Category_ID', categoryId)\n          .single();\n\n        if (error) {\n          console.error('Error fetching category:', error);\n          return;\n        }\n\n        if (data) {\n          setCategoryName(data.Category_Name);\n        }\n      }\n\n      if (source) {\n        const { data, error } = await supabase\n          .from('Sources')\n          .select('Source_Title')\n          .eq('Source_ID', source)\n          .single();\n\n        if (error) {\n          console.error('Error fetching source:', error);\n          return;\n        }\n\n        if (data) {\n          setSourceName(data.Source_Title);\n        }\n      }\n\n      if (country) {\n        const { data, error } = await supabase\n          .from('Countries')\n          .select('Country_Title')\n          .eq('Country_ID', country)\n          .single();\n\n        if (error) {\n          console.error('Error fetching country:', error);\n          return;\n        }\n\n        if (data) {\n          setCountryName(data.Country_Title);\n        }\n      }\n    }\n\n    fetchNames();\n  }, [categoryId, source, country]);\n\n  // Function to load all results\n  const loadAllResults = async () => {\n    setLoading(true);\n    setResults([]);\n    setAllProducts([]);\n    setAllSuppliers([]);\n    setCurrentPage(0);\n    setHasMore(true);\n\n    try {\n      console.log(`Loading all results for search... (mode: ${currentDisplayMode})`);\n      \n      // Always fetch both products and suppliers data\n      let productsData: any[] = [];\n      let suppliersData: any[] = [];\n      let productsCount = 0;\n      let suppliersCount = 0;\n\n      // Fetch products data\n      if (source) {\n        console.log('Loading products for source:', source);\n        \n        const { data, error, count } = await supabase\n          .from('Products')\n          .select(`\n            Product_ID,\n            Product_Title,\n            Product_Price,\n            Product_Image_URL,\n            Product_URL,\n            Product_MOQ,\n            Product_Country_Name,\n            Product_Category_Name,\n            Product_Supplier_Name,\n            Product_Source_Name\n          `, { count: 'exact' })\n          .eq('Product_Source_ID', source)\n          .order('Product_ID');\n\n        if (error) throw error;\n        productsData = data || [];\n        productsCount = count || 0;\n      } else if (categoryId) {\n        console.log('Loading products for category:', categoryId);\n        \n        const { data, error, count } = await supabase\n          .from('Products')\n          .select(`\n            Product_ID,\n            Product_Title,\n            Product_Price,\n            Product_Image_URL,\n            Product_URL,\n            Product_MOQ,\n            Product_Country_Name,\n            Product_Category_Name,\n            Product_Supplier_Name,\n            Product_Source_Name\n          `, { count: 'exact' })\n          .eq('Product_Category_ID', categoryId)\n          .order('Product_ID');\n\n        if (error) throw error;\n        productsData = data || [];\n        productsCount = count || 0;\n      } else if (country) {\n        console.log('Loading products for country:', country);\n        \n        const { data, error, count } = await supabase\n          .from('Products')\n          .select(`\n            Product_ID,\n            Product_Title,\n            Product_Price,\n            Product_Image_URL,\n            Product_URL,\n            Product_MOQ,\n            Product_Country_Name,\n            Product_Category_Name,\n            Product_Supplier_Name,\n            Product_Source_Name\n          `, { count: 'exact' })\n          .eq('Product_Country_ID', country)\n          .order('Product_ID');\n\n        if (error) throw error;\n        productsData = data || [];\n        productsCount = count || 0;\n      } else if (query) {\n        // For text searches, use Meilisearch to get all results\n        console.log('Loading products for text search:', query);\n        \n        const searchResults = await productsIndex.search(query, {\n          limit: 10000, // Get all results\n          facets: ['supplier', 'source', 'country']\n        });\n\n        productsData = searchResults.hits;\n        productsCount = searchResults.estimatedTotalHits || 0;\n      }\n\n      // Fetch suppliers data\n      if (query) {\n        console.log('Loading suppliers for text search:', query);\n        \n        const searchResults = await suppliersIndex.search(query, {\n          limit: 10000, // Get all results\n          facets: ['Supplier_Country_Name', 'Supplier_Source_ID']\n        });\n\n        suppliersData = searchResults.hits;\n        suppliersCount = searchResults.estimatedTotalHits || 0;\n      } else if (country) {\n        console.log('Loading suppliers for country:', country);\n        \n        const { data, error, count } = await supabase\n          .from('Supplier')\n          .select(`\n            Supplier_ID,\n            Supplier_Title,\n            Supplier_Description,\n            Supplier_Location,\n            Supplier_Country_Name,\n            Supplier_City_Name,\n            Supplier_Source_ID\n          `, { count: 'exact' })\n          .eq('Supplier_Country_ID', country)\n          .order('Supplier_Title');\n\n        if (error) throw error;\n        suppliersData = data || [];\n        suppliersCount = count || 0;\n      } else if (source) {\n        console.log('Loading suppliers for source:', source);\n        \n        const { data, error, count } = await supabase\n          .from('Supplier')\n          .select(`\n            Supplier_ID,\n            Supplier_Title,\n            Supplier_Description,\n            Supplier_Location,\n            Supplier_Country_Name,\n            Supplier_City_Name,\n            Supplier_Source_ID\n          `, { count: 'exact' })\n          .eq('Supplier_Source_ID', source)\n          .order('Supplier_Title');\n\n        if (error) throw error;\n        suppliersData = data || [];\n        suppliersCount = count || 0;\n      }\n\n      // Extract unique source IDs for batch fetching\n      const sourceIds = [...new Set(\n        suppliersData\n          .map(supplier => supplier.Supplier_Source_ID)\n          .filter(Boolean)\n      )];\n\n      // Fetch source titles from Supabase\n      let sourceTitles: Record<string, string> = {};\n      if (sourceIds.length > 0) {\n        try {\n          const { data: sourcesData, error: sourcesError } = await supabase\n            .from('Sources')\n            .select('Source_ID, Source_Title')\n            .in('Source_ID', sourceIds);\n\n          if (sourcesError) {\n            console.error('Error fetching sources:', sourcesError);\n          } else if (sourcesData) {\n            sourceTitles = sourcesData.reduce((acc, source) => {\n              acc[source.Source_ID] = source.Source_Title;\n              return acc;\n            }, {} as Record<string, string>);\n          }\n        } catch (err) {\n          console.error('Error in source fetch:', err);\n        }\n      }\n\n      // Format product results\n      const formattedProducts = productsData.map(product => ({\n        id: product.Product_ID || product.id,\n        name: product.Product_Title || product.title,\n        Product_Price: product.Product_Price || product.price || '$0',\n        image: product.Product_Image_URL || product.image || '',\n        country: product.Product_Country_Name || product.country || 'Unknown',\n        category: product.Product_Category_Name || product.category || 'Unknown',\n        supplier: product.Product_Supplier_Name || product.supplier || 'Unknown',\n        Product_MOQ: product.Product_MOQ || product.moq || '0',\n        sourceUrl: product.Product_URL || product.url || '',\n        marketplace: product.Product_Source_Name || product.source || 'Unknown'\n      }));\n\n      // Format supplier results\n      const formattedSuppliers = suppliersData.map(supplier => ({\n        Supplier_ID: supplier.Supplier_ID,\n        Supplier_Title: supplier.Supplier_Title,\n        Supplier_Description: supplier.Supplier_Description || '',\n        Supplier_Country_Name: supplier.Supplier_Country_Name || 'Unknown',\n        Supplier_City_Name: supplier.Supplier_City_Name || '',\n        Supplier_Location: supplier.Supplier_Location || '',\n        product_count: supplier.product_count || 0,\n        product_keywords: supplier.product_keywords || '',\n        sourceTitle: sourceTitles[supplier.Supplier_Source_ID] || 'Unknown Source'\n      }));\n\n      // Store all fetched data\n      setAllProducts(formattedProducts);\n      setAllSuppliers(formattedSuppliers);\n      \n      // Set total count based on current display mode\n      setTotalCount(currentDisplayMode === 'products' ? productsCount : suppliersCount);\n      \n      // Generate suggestions based on the current display mode\n      if (currentDisplayMode === 'products') {\n        generateSuggestions(formattedProducts, query, 'products');\n      } else {\n        generateSuggestions(formattedSuppliers, query, 'suppliers');\n      }\n      \n      // Update displayed results based on current display mode\n      updateDisplayedResults(currentDisplayMode);\n      \n      // Log the search query\n      if (query) {\n        logSearchQuery(query, currentDisplayMode);\n      }\n    } catch (err) {\n      console.error('Search error:', err);\n      logError(err instanceof Error ? err : new Error('Search failed'), {\n        type: 'search_error',\n        query,\n        category: categoryId,\n        source,\n        country,\n        mode: currentDisplayMode\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initial load\n  useEffect(() => {\n    loadAllResults();\n  }, [query, categoryId, source, country]);\n\n  // Update filter options based on all results\n  useEffect(() => {\n    if (currentDisplayMode === 'suppliers') {\n      const countryCounts = new Map();\n      const sourceCounts = new Map();\n\n      allSuppliers.forEach(supplier => {\n        if (supplier.Supplier_Country_Name) {\n          countryCounts.set(supplier.Supplier_Country_Name, (countryCounts.get(supplier.Supplier_Country_Name) || 0) + 1);\n        }\n        if (supplier.sourceTitle) {\n          sourceCounts.set(supplier.sourceTitle, (sourceCounts.get(supplier.sourceTitle) || 0) + 1);\n        }\n      });\n\n      setFilters(prev => ({\n        ...prev,\n        categories: { ...prev.categories, options: [] },\n        suppliers: { ...prev.suppliers, options: [] },\n        countries: {\n          ...prev.countries,\n          options: Array.from(countryCounts.entries()).map(([title, count]) => ({\n            id: title,\n            title,\n            count: count as number\n          }))\n        },\n        sources: {\n          ...prev.sources,\n          options: Array.from(sourceCounts.entries()).map(([title, count]) => ({\n            id: title,\n            title,\n            count: count as number\n          }))\n        }\n      }));\n    } else {\n      const categoryCounts = new Map();\n      const supplierCounts = new Map();\n      const sourceCounts = new Map();\n      const countryCounts = new Map();\n\n      allProducts.forEach(product => {\n        categoryCounts.set(product.category, (categoryCounts.get(product.category) || 0) + 1);\n        supplierCounts.set(product.supplier, (supplierCounts.get(product.supplier) || 0) + 1);\n        sourceCounts.set(product.marketplace, (sourceCounts.get(product.marketplace) || 0) + 1);\n        countryCounts.set(product.country, (countryCounts.get(product.country) || 0) + 1);\n      });\n\n      setFilters(prev => ({\n        categories: {\n          ...prev.categories,\n          options: Array.from(categoryCounts.entries()).map(([title, count]) => ({\n            id: title,\n            title,\n            count: count as number\n          }))\n        },\n        suppliers: {\n          ...prev.suppliers,\n          options: Array.from(supplierCounts.entries()).map(([title, count]) => ({\n            id: title,\n            title,\n            count: count as number\n          }))\n        },\n        sources: {\n          ...prev.sources,\n          options: Array.from(sourceCounts.entries()).map(([title, count]) => ({\n            id: title,\n            title,\n            count: count as number\n          }))\n        },\n        countries: {\n          ...prev.countries,\n          options: Array.from(countryCounts.entries()).map(([title, count]) => ({\n            id: title,\n            title,\n            count: count as number\n          }))\n        }\n      }));\n    }\n  }, [allProducts, allSuppliers, currentDisplayMode]);\n\n  // Infinite scroll handler\n  useEffect(() => {\n    const handleScroll = () => {\n      if (\n        window.innerHeight + document.documentElement.scrollTop\n        >= document.documentElement.offsetHeight - 1000 &&\n        hasMore &&\n        !loadingMore &&\n        !loading\n      ) {\n        loadMoreResults();\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [hasMore, loadingMore, loading, currentPage]);\n\n  const loadMoreResults = () => {\n    if (!hasMore || loadingMore) return;\n\n    setLoadingMore(true);\n    const nextPage = currentPage + 1;\n    const startIndex = nextPage * ITEMS_PER_PAGE;\n    const endIndex = startIndex + ITEMS_PER_PAGE;\n    \n    // Apply filters and sorting to get the filtered results\n    const filteredResults = getFilteredAndSortedResults(currentDisplayMode);\n    const newResults = filteredResults.slice(startIndex, endIndex);\n    \n    setResults(prev => [...prev, ...newResults]);\n    setCurrentPage(nextPage);\n    setHasMore(endIndex < filteredResults.length);\n    setLoadingMore(false);\n  };\n\n  const handleFilterChange = (group: keyof typeof filters, value: string) => {\n    setFilters(prev => ({\n      ...prev,\n      [group]: {\n        ...prev[group],\n        selected: prev[group].selected.includes(value)\n          ? prev[group].selected.filter(v => v !== value)\n          : [...prev[group].selected, value]\n      }\n    }));\n    \n    // Reset pagination when filters change\n    setCurrentPage(0);\n    updateDisplayedResults(currentDisplayMode);\n  };\n\n  const getFilteredAndSortedResults = (displayMode: 'products' | 'suppliers') => {\n    if (displayMode === 'suppliers') {\n      let filtered = allSuppliers.filter(supplier => {\n        const matchesCountry = filters.countries.selected.length === 0 || \n          filters.countries.selected.includes(supplier.Supplier_Country_Name || 'Unknown');\n        \n        const matchesSource = filters.sources.selected.length === 0 ||\n          filters.sources.selected.includes(supplier.sourceTitle || 'Unknown Source');\n        \n        return matchesCountry && matchesSource;\n      });\n\n      // Apply sorting for suppliers\n      if (sortBy) {\n        filtered = [...filtered].sort((a, b) => {\n          let compareA, compareB;\n\n          switch (sortBy) {\n            case 'country':\n              compareA = (a.Supplier_Country_Name || 'Unknown').toLowerCase();\n              compareB = (b.Supplier_Country_Name || 'Unknown').toLowerCase();\n              break;\n            case 'marketplace':\n              compareA = (a.sourceTitle || 'Unknown').toLowerCase();\n              compareB = (b.sourceTitle || 'Unknown').toLowerCase();\n              break;\n            case 'products':\n              compareA = a.product_count || 0;\n              compareB = b.product_count || 0;\n              break;\n            default:\n              compareA = a.Supplier_Title.toLowerCase();\n              compareB = b.Supplier_Title.toLowerCase();\n              break;\n          }\n\n          if (sortOrder === 'asc') {\n            return compareA > compareB ? 1 : -1;\n          } else {\n            return compareA < compareB ? 1 : -1;\n          }\n        });\n      }\n\n      return filtered;\n    } else {\n      let filtered = allProducts.filter(product => {\n        const matchesCategory = filters.categories.selected.length === 0 || \n          filters.categories.selected.includes(product.category);\n        const matchesSupplier = filters.suppliers.selected.length === 0 || \n          filters.suppliers.selected.includes(product.supplier);\n        const matchesSource = filters.sources.selected.length === 0 ||\n          filters.sources.selected.includes(product.marketplace);\n        const matchesCountry = filters.countries.selected.length === 0 ||\n          filters.countries.selected.includes(product.country);\n\n        return matchesCategory && matchesSupplier && matchesSource && matchesCountry;\n      });\n\n      // Apply sorting for products\n      if (sortBy) {\n        filtered = [...filtered].sort((a, b) => {\n          let compareA, compareB;\n\n          switch (sortBy) {\n            case 'price':\n              compareA = parseFloat(a.Product_Price.replace(/[^0-9.-]+/g, ''));\n              compareB = parseFloat(b.Product_Price.replace(/[^0-9.-]+/g, ''));\n              break;\n            case 'country':\n              compareA = a.country.toLowerCase();\n              compareB = b.country.toLowerCase();\n              break;\n            case 'category':\n              compareA = a.category.toLowerCase();\n              compareB = b.category.toLowerCase();\n              break;\n            case 'marketplace':\n              compareA = a.marketplace.toLowerCase();\n              compareB = b.marketplace.toLowerCase();\n              break;\n            default:\n              return 0;\n          }\n\n          if (sortOrder === 'asc') {\n            return compareA > compareB ? 1 : -1;\n          } else {\n            return compareA < compareB ? 1 : -1;\n          }\n        });\n      }\n\n      return filtered;\n    }\n  };\n\n  const updateDisplayedResults = (displayMode: 'products' | 'suppliers') => {\n    const filteredResults = getFilteredAndSortedResults(displayMode);\n    setResults(filteredResults.slice(0, ITEMS_PER_PAGE));\n    setHasMore(filteredResults.length > ITEMS_PER_PAGE);\n    setCurrentPage(0);\n    \n    // Update total count based on filtered results\n    setTotalCount(filteredResults.length);\n  };\n\n  // Update displayed results when filters or sorting change\n  useEffect(() => {\n    updateDisplayedResults(currentDisplayMode);\n  }, [filters, sortBy, sortOrder]);\n\n  // Update displayed results when display mode changes\n  useEffect(() => {\n    updateDisplayedResults(currentDisplayMode);\n  }, [currentDisplayMode]);\n\n  const getPageTitle = () => {\n    if (currentDisplayMode === 'suppliers') {\n      if (country && countryName) return `Suppliers from ${countryName}`;\n      if (source && sourceName) return `Suppliers from ${sourceName}`;\n      return query ? `Supplier Results for \"${query}\"` : 'All Suppliers';\n    } else {\n      if (categoryId && categoryName) return `Products in ${categoryName}`;\n      if (source && sourceName) return `${totalCount.toLocaleString()} Products from ${sourceName}`;\n      if (country && countryName) return `Products from ${countryName}`;\n      return query ? `Search Results for \"${query}\"` : 'All Products';\n    }\n  };\n\n  const filteredResults = getFilteredAndSortedResults(currentDisplayMode);\n\n  return (\n    <>\n      <SEO \n        title={getPageTitle()}\n        description={`Browse ${filteredResults.length} ${currentDisplayMode === 'suppliers' ? 'suppliers' : 'products'} matching your search. Filter by ${currentDisplayMode === 'suppliers' ? 'country and source' : 'supplier, source, and country'}.`}\n        keywords={`search results, ${query}, ${currentDisplayMode === 'suppliers' ? 'supplier search, filter suppliers' : 'product search, filter products'}`}\n      />\n      <div className=\"pt-24 pb-16 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <Breadcrumbs currentPageTitle={getPageTitle()} />\n\n          <div className=\"space-y-6\">\n            <div className=\"flex flex-col gap-4\">\n              <p className=\"text-gray-300\">\n                {loading ? 'Loading...' : `${filteredResults.length} of ${totalCount.toLocaleString()} results`}\n                {hasMore && !loading && ` (showing ${results.length})`}\n              </p>\n\n              {/* Display Mode Toggle with \"View by\" text */}\n              <div className=\"flex justify-between items-center flex-wrap gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-gray-300\">View by:</span>\n                  <div className=\"flex gap-2\">\n                    <button\n                      onClick={() => handleDisplayModeToggle('products')}\n                      className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${\n                        currentDisplayMode === 'products'\n                          ? 'bg-[#F4A024] text-gray-900'\n                          : 'bg-white/10 text-gray-300 hover:bg-white/20'\n                      }`}\n                    >\n                      <Package className=\"w-4 h-4\" />\n                      Products\n                    </button>\n                    <button\n                      onClick={() => handleDisplayModeToggle('suppliers')}\n                      className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${\n                        currentDisplayMode === 'suppliers'\n                          ? 'bg-[#F4A024] text-gray-900'\n                          : 'bg-white/10 text-gray-300 hover:bg-white/20'\n                      }`}\n                    >\n                      <Building2 className=\"w-4 h-4\" />\n                      Suppliers\n                    </button>\n                  </div>\n                </div>\n\n                {/* Related Searches Section */}\n                {suggestedSearches.length > 0 && query && (\n                  <div className=\"bg-gray-800/30 rounded-lg p-4\">\n                    <h3 className=\"text-sm font-medium text-gray-300 mb-3\">\n                      Searches related to \"{query}\"\n                    </h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {suggestedSearches.map((suggestion, index) => (\n                        <button\n                          key={index}\n                          onClick={() => handleSuggestionClick(suggestion)}\n                          className=\"px-3 py-1.5 bg-gray-700/50 hover:bg-gray-600/50 text-gray-300 hover:text-[#F4A024] text-sm rounded-full transition-colors border border-gray-600/50 hover:border-[#F4A024]/50\"\n                        >\n                          {suggestion}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <StandardFilters\n                filters={filters}\n                onFilterChange={handleFilterChange}\n                sortBy={sortBy}\n                setSortBy={setSortBy}\n                sortOrder={sortOrder}\n                setSortOrder={setSortOrder}\n                activeDropdown={activeDropdown}\n                setActiveDropdown={setActiveDropdown}\n                showCategories={currentDisplayMode === 'products'}\n                showSuppliers={currentDisplayMode === 'products'}\n                showSources={true}\n                showCountries={true}\n              />\n            </div>\n\n            {loading ? (\n              <div className=\"text-center py-12\">\n                <LoadingSpinner />\n              </div>\n            ) : results.length > 0 ? (\n              <>\n                {currentDisplayMode === 'suppliers' ? (\n                  // Supplier results grid\n                  <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3\">\n                    {results.map((supplier) => (\n                      <SupplierCard \n                        key={supplier.Supplier_ID} \n                        supplier={supplier as Supplier} \n                      />\n                    ))}\n                  </div>\n                ) : (\n                  // Product results grid\n                  <div className=\"grid grid-cols-1 gap-y-10 gap-x-6 sm:grid-cols-2 lg:grid-cols-3 xl:gap-x-8\">\n                    {results.map((product) => (\n                      <ProductCard key={product.id} product={product as Product} />\n                    ))}\n                  </div>\n                )}\n                \n                {/* Loading more indicator */}\n                {loadingMore && (\n                  <div className=\"text-center py-8\">\n                    <LoadingSpinner />\n                    <p className=\"text-gray-400 mt-2\">Loading more results...</p>\n                  </div>\n                )}\n                \n                {/* End of results indicator */}\n                {!hasMore && results.length > 0 && (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-400 text-sm\">You've reached the end of the results</p>\n                  </div>\n                )}\n              </>\n            ) : (\n              <div className=\"text-center py-12\">\n                <p className=\"text-gray-300 font-bold\">\n                  No {currentDisplayMode === 'suppliers' ? 'suppliers' : 'products'} found \n                  {categoryId ? ' in this category' : \n                   source ? ' from this source' : \n                   country ? ' from this country' : \n                   query ? ` for \"${query}\"` : ''}\n                </p>\n                <p className=\"text-gray-400 font-bold mt-2\">\n                  Try {categoryId ? 'another category' : \n                       source ? 'another source' : \n                       country ? 'another country' : \n                       'searching with different keywords'} or browse our categories\n                </p>\n                \n                {/* Suggest switching display mode if there are results in the other mode */}\n                {currentDisplayMode === 'products' && allSuppliers.length > 0 && (\n                  <button\n                    onClick={() => handleDisplayModeToggle('suppliers')}\n                    className=\"mt-4 text-[#F4A024] hover:text-[#F4A024]/80 font-medium\"\n                  >\n                    Switch to Suppliers view ({allSuppliers.length} results available)\n                  </button>\n                )}\n                \n                {currentDisplayMode === 'suppliers' && allProducts.length > 0 && (\n                  <button\n                    onClick={() => handleDisplayModeToggle('products')}\n                    className=\"mt-4 text-[#F4A024] hover:text-[#F4A024]/80 font-medium\"\n                  >\n                    Switch to Products view ({allProducts.length} results available)\n                  </button>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}"],"names":["results","searchParams","mode","source","filteredResults"],"mappings":"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"}