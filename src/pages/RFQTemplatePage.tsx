import React, { useState, useCallback } from 'react';
import { Plus, FileText, Search, Upload, X } from 'lucide-react';
import { useProductSearch } from '../hooks/useProductSearch';
import { useSupplierSearch } from '../hooks/useSupplierSearch';
import { useSavedItems } from '../hooks/useSavedItems';
import { productsIndex } from '../lib/meilisearch';
import LoadingSpinner from '../components/LoadingSpinner';
import toast from 'react-hot-toast';

// Dynamic imports for PDF functionality
const PDFComponents = React.lazy(() => 
  import('@react-pdf/renderer').then(module => ({
    default: {
      PDFDownloadLink: module.PDFDownloadLink,
      Document: module.Document,
      Page: module.Page,
      Text: module.Text,
      View: module.View,
      StyleSheet: module.StyleSheet,
      Font: module.Font
    }
  }))
);

interface RFQFormData {
  companyName: string;
  email: string;
  address: string;
  city: string;
  zipCode: string;
  countryRegion: string;
  stateProvince: string;
  vendorName: string;
  vendorId: string | null;
  items: Array<{
    id: string;
    name: string;
    quantity: string;
    url: string;
    moq: string;
  }>;
  notes: string;
}

interface SearchResult {
  id: string;
  name: string;
  price?: string;
  image?: string;
  country?: string;
  category?: string;
  supplier?: string;
  marketplace?: string;
  moq?: string;
}

const initialFormData: RFQFormData = {
  companyName: '',
  email: '',
  address: '',
  city: '',
  zipCode: '',
  countryRegion: '',
  stateProvince: '',
  vendorName: '',
  vendorId: null,
  items: [],
  notes: ''
};

// PDF styles - moved outside component to avoid recreation
const pdfStyles = {
  page: {
    padding: 40,
    fontFamily: 'Helvetica'
  },
  header: {
    marginBottom: 20,
    borderBottom: '1 solid #cccccc',
    paddingBottom: 10
  },
  title: {
    fontSize: 24,
    textAlign: 'center',
    marginBottom: 10,
    color: '#F4A024',
    fontWeight: 'bold'
  },
  subtitle: {
    fontSize: 12,
    textAlign: 'center',
    color: '#666666',
    marginBottom: 5
  },
  date: {
    fontSize: 10,
    textAlign: 'right',
    color: '#666666'
  },
  section: {
    marginBottom: 20
  },
  sectionTitle: {
    fontSize: 14,
    marginBottom: 10,
    backgroundColor: '#f5f5f5',
    padding: 5,
    fontWeight: 'bold'
  },
  table: {
    width: '100%',
    marginBottom: 10
  },
  tableHeader: {
    flexDirection: 'row',
    backgroundColor: '#f5f5f5',
    borderBottomColor: '#cccccc',
    borderBottomWidth: 1,
    padding: 8
  },
  tableRow: {
    flexDirection: 'row',
    borderBottomColor: '#eeeeee',
    borderBottomWidth: 1,
    padding: 8,
    minHeight: 24
  },
  tableCell: {
    flex: 1,
    fontSize: 10
  },
  tableCellHeader: {
    flex: 1,
    fontSize: 10,
    fontWeight: 'bold'
  },
  infoRow: {
    flexDirection: 'row',
    marginBottom: 5
  },
  label: {
    width: 120,
    fontSize: 10,
    fontWeight: 'bold'
  },
  value: {
    flex: 1,
    fontSize: 10
  },
  notes: {
    marginTop: 20,
    padding: 10,
    backgroundColor: '#f9f9f9'
  },
  notesTitle: {
    fontSize: 12,
    fontWeight: 'bold',
    marginBottom: 5
  },
  notesText: {
    fontSize: 10,
    lineHeight: 1.4
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 40,
    right: 40,
    textAlign: 'center',
    color: '#666666',
    fontSize: 8,
    borderTop: '1 solid #cccccc',
    paddingTop: 10
  }
};

// PDF Document Component - will be created dynamically
const createRFQDocument = (PDFComponents: any, data: RFQFormData) => {
  const { Document, Page, Text, View, StyleSheet } = PDFComponents;
  
  const styles = StyleSheet.create(pdfStyles);

  return React.createElement(Document, null,
    React.createElement(Page, { size: "A4", style: styles.page },
      React.createElement(View, { style: styles.header },
        React.createElement(Text, { style: styles.title }, "Request for Quotation (RFQ)"),
        React.createElement(Text, { style: styles.subtitle }, "Generated by Paisán - Latin American Products Marketplace"),
        React.createElement(Text, { style: styles.date }, 
          new Date().toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          })
        )
      ),
      
      React.createElement(View, { style: styles.section },
        React.createElement(Text, { style: styles.sectionTitle }, "Customer Information"),
        React.createElement(View, { style: styles.table },
          React.createElement(View, { style: styles.tableRow },
            React.createElement(Text, { style: styles.label }, "Company Name:"),
            React.createElement(Text, { style: styles.value }, data.companyName)
          ),
          React.createElement(View, { style: styles.tableRow },
            React.createElement(Text, { style: styles.label }, "Email:"),
            React.createElement(Text, { style: styles.value }, data.email)
          ),
          React.createElement(View, { style: styles.tableRow },
            React.createElement(Text, { style: styles.label }, "Address:"),
            React.createElement(Text, { style: styles.value }, data.address)
          ),
          React.createElement(View, { style: styles.tableRow },
            React.createElement(Text, { style: styles.label }, "City:"),
            React.createElement(Text, { style: styles.value }, data.city)
          ),
          React.createElement(View, { style: styles.tableRow },
            React.createElement(Text, { style: styles.label }, "State/Province:"),
            React.createElement(Text, { style: styles.value }, data.stateProvince)
          ),
          React.createElement(View, { style: styles.tableRow },
            React.createElement(Text, { style: styles.label }, "Country/Region:"),
            React.createElement(Text, { style: styles.value }, data.countryRegion)
          )
        )
      ),

      React.createElement(View, { style: styles.section },
        React.createElement(Text, { style: styles.sectionTitle }, "Vendor Information"),
        React.createElement(View, { style: styles.table },
          React.createElement(View, { style: styles.tableRow },
            React.createElement(Text, { style: styles.label }, "Vendor Name:"),
            React.createElement(Text, { style: styles.value }, data.vendorName || 'Multiple Vendors')
          )
        )
      ),

      React.createElement(View, { style: styles.section },
        React.createElement(Text, { style: styles.sectionTitle }, "Requested Items"),
        React.createElement(View, { style: styles.table },
          React.createElement(View, { style: styles.tableHeader },
            React.createElement(Text, { style: [styles.tableCellHeader, { flex: 2 }] }, "Item Description"),
            React.createElement(Text, { style: [styles.tableCellHeader, { flex: 2 }] }, "Product Link"),
            React.createElement(Text, { style: styles.tableCellHeader }, "MOQ"),
            React.createElement(Text, { style: styles.tableCellHeader }, "Quantity")
          ),
          ...data.items.map((item, index) =>
            React.createElement(View, { key: index, style: styles.tableRow },
              React.createElement(Text, { style: [styles.tableCell, { flex: 2 }] }, item.name),
              React.createElement(Text, { style: [styles.tableCell, { flex: 2 }] }, item.url),
              React.createElement(Text, { style: styles.tableCell }, item.moq),
              React.createElement(Text, { style: styles.tableCell }, item.quantity)
            )
          )
        )
      ),

      data.notes && React.createElement(View, { style: styles.notes },
        React.createElement(Text, { style: styles.notesTitle }, "Additional Notes"),
        React.createElement(Text, { style: styles.notesText }, data.notes)
      ),

      React.createElement(Text, { style: styles.footer },
        "This RFQ was automatically generated through Paisán (paisan.net). For any questions, please contact support@paisan.net"
      )
    )
  );
};

function useDebouncedValue(value: string, delay: number): string {
  const [debouncedValue, setDebouncedValue] = useState(value);

  React.useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(value), delay);
    return () => clearTimeout(handler);
  }, [value, delay]);

  return debouncedValue;
}

export default function RFQTemplatePage() {
  const [formData, setFormData] = useState<RFQFormData>(initialFormData);
  const [vendorSearchQuery, setVendorSearchQuery] = useState('');
  const [productSearchQuery, setProductSearchQuery] = useState('');
  const [showProductSearch, setShowProductSearch] = useState(false);
  const [showVendorSearch, setShowVendorSearch] = useState(false);
  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const [pdfLoading, setPdfLoading] = useState(false);
  
  const { suppliers: vendorResults, loading: vendorLoading } = useSupplierSearch(vendorSearchQuery);
  const { products, loading: productLoading } = useProductSearch(productSearchQuery, formData.vendorId);
  const { data: savedItems = [], isLoading: savedItemsLoading } = useSavedItems();

  const debouncedProductQuery = useDebouncedValue(productSearchQuery, 300);

  // Enhanced product search using Meilisearch
  React.useEffect(() => {
    async function performProductSearch() {
      if (!debouncedProductQuery.trim()) {
        setSearchResults([]);
        return;
      }

      setSearchLoading(true);
      try {
        const searchResponse = await productsIndex.search(debouncedProductQuery, {
          limit: 20,
          attributesToRetrieve: [
            'id',
            'title',
            'price',
            'image',
            'url',
            'moq',
            'country',
            'category',
            'supplier',
            'source'
          ]
        });

        const formattedResults: SearchResult[] = searchResponse.hits.map(hit => ({
          id: hit.id as string,
          name: hit.title as string,
          price: hit.price as string,
          image: hit.image as string || '',
          country: hit.country as string || 'Unknown',
          category: hit.category as string || 'Unknown',
          supplier: hit.supplier as string || 'Unknown',
          marketplace: hit.source as string || 'Unknown',
          moq: hit.moq as string || 'N/A'
        }));

        setSearchResults(formattedResults);
      } catch (error) {
        console.error('Product search error:', error);
        setSearchResults([]);
      } finally {
        setSearchLoading(false);
      }
    }

    performProductSearch();
  }, [debouncedProductQuery]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    if (name === 'vendorName') {
      setVendorSearchQuery(value);
      setShowVendorSearch(true);
    }
  };

  const handleVendorSelect = (vendorId: string, vendorName: string) => {
    setFormData(prev => ({
      ...prev,
      vendorId,
      vendorName
    }));
    setShowVendorSearch(false);
    setVendorSearchQuery('');
  };

  const handleItemQuantityChange = (itemId: string, quantity: string) => {
    setFormData(prev => ({
      ...prev,
      items: prev.items.map(item => 
        item.id === itemId ? { ...item, quantity } : item
      )
    }));
  };

  const addItemFromSearch = (result: SearchResult) => {
    // Check if item already exists
    const existingItem = formData.items.find(item => item.id === result.id);
    if (existingItem) {
      toast.info('This item is already in your RFQ');
      return;
    }

    setFormData(prev => ({
      ...prev,
      items: [...prev.items, {
        id: result.id,
        name: result.name,
        url: `https://paisan.net/product/${result.id}`,
        quantity: '1',
        moq: result.moq || 'N/A'
      }]
    }));
    
    toast.success('Item added to RFQ');
  };

  const addItem = (product: any) => {
    if (!product) return;
    
    // Check if item already exists
    const existingItem = formData.items.find(item => item.id === product.Product_ID);
    if (existingItem) {
      toast.info('This item is already in your RFQ');
      return;
    }

    const basePrice = parseFloat((product.Product_Price || '').replace(/[^0-9.-]+/g, ''));
    if (!isNaN(basePrice)) {
      setFormData(prev => ({
        ...prev,
        items: [...prev.items, {
          id: product.Product_ID,
          name: product.Product_Title || 'Untitled Product',
          url: `https://paisan.net/product/${product.Product_ID}`,
          quantity: '1',
          moq: product.Product_MOQ || 'N/A'
        }]
      }));
      toast.success('Item added to RFQ');
    }
    setProductSearchQuery('');
  };

  const removeItem = (itemId: string) => {
    setFormData(prev => ({
      ...prev,
      items: prev.items.filter(item => item.id !== itemId)
    }));
    toast.success('Item removed from RFQ');
  };

  const importSavedItems = () => {
    if (savedItems.length === 0) {
      toast.error('No saved items found');
      return;
    }

    const newItems = savedItems.map(item => ({
      id: item.id,
      name: item.name,
      url: `https://paisan.net/product/${item.id}`,
      quantity: '1',
      moq: item.Product_MOQ || 'N/A'
    }));

    // Filter out items that are already in the RFQ
    const existingItemIds = new Set(formData.items.map(item => item.id));
    const itemsToAdd = newItems.filter(item => !existingItemIds.has(item.id));

    if (itemsToAdd.length === 0) {
      toast.info('All saved items are already in your RFQ');
      return;
    }

    setFormData(prev => ({
      ...prev,
      items: [...prev.items, ...itemsToAdd]
    }));

    toast.success(`Added ${itemsToAdd.length} saved items to your RFQ`);
  };

  const handlePDFDownload = useCallback(async () => {
    setPdfLoading(true);
    try {
      const PDFModule = await import('@react-pdf/renderer');
      const pdfComponents = {
        PDFDownloadLink: PDFModule.PDFDownloadLink,
        Document: PDFModule.Document,
        Page: PDFModule.Page,
        Text: PDFModule.Text,
        View: PDFModule.View,
        StyleSheet: PDFModule.StyleSheet
      };

      const document = createRFQDocument(pdfComponents, formData);
      
      // Create a temporary link element to trigger download
      const blob = await PDFModule.pdf(document).toBlob();
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'rfq-template.pdf';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error generating PDF:', error);
      toast.error('Failed to generate PDF. Please try again.');
    } finally {
      setPdfLoading(false);
    }
  }, [formData]);

  return (
    <div className="min-h-screen bg-black text-white pt-32 pb-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold mb-2">Request For Quote (RFQ) Template</h1>
          <p className="text-gray-400">Simplify your quoting process</p>
          <p className="text-sm text-[#F4A024] mt-2">Free RFQ template, instantly export as PDF!</p>
        </div>

        <div className="bg-gray-900 rounded-lg p-8 mb-8">
          <h2 className="text-xl font-semibold mb-6">Enter your company information</h2>
          <div className="grid grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Company name</label>
              <input
                type="text"
                name="companyName"
                value={formData.companyName}
                onChange={handleChange}
                className="w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Email</label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                className="w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Address</label>
              <input
                type="text"
                name="address"
                value={formData.address}
                onChange={handleChange}
                className="w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">City</label>
              <input
                type="text"
                name="city"
                value={formData.city}
                onChange={handleChange}
                className="w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">Country/Region</label>
              <input
                type="text"
                name="countryRegion"
                value={formData.countryRegion}
                onChange={handleChange}
                className="w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">State/Province</label>
              <input
                type="text"
                name="stateProvince"
                value={formData.stateProvince}
                onChange={handleChange}
                className="w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
              />
            </div>
          </div>
        </div>

        <div className="bg-gray-900 rounded-lg p-8 mb-8">
          <h2 className="text-xl font-semibold mb-6">Enter vendor information</h2>
          <div className="relative">
            <label className="block text-sm font-medium text-gray-300 mb-1">Vendor name (Optional)</label>
            <input
              type="text"
              name="vendorName"
              value={formData.vendorName}
              onChange={handleChange}
              className="w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
              placeholder="Search for a vendor or leave blank for multiple vendors..."
            />
            
            {showVendorSearch && vendorResults.length > 0 && (
              <div className="absolute z-10 w-full mt-1 bg-gray-800 border border-gray-700 rounded-md shadow-lg">
                {vendorLoading ? (
                  <div className="p-4 text-center">
                    <LoadingSpinner />
                  </div>
                ) : (
                  <div className="max-h-60 overflow-y-auto">
                    {vendorResults.map((vendor) => (
                      <button
                        key={vendor.Supplier_ID}
                        onClick={() => handleVendorSelect(vendor.Supplier_ID, vendor.Supplier_Title)}
                        className="w-full text-left px-4 py-2 hover:bg-gray-700 transition-colors"
                      >
                        {vendor.Supplier_Title}
                      </button>
                    ))}
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        <div className="bg-gray-900 rounded-lg p-8 mb-8">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-semibold">Enter the items you wish to order</h2>
            <div className="flex gap-4">
              {savedItems.length > 0 && (
                <button
                  onClick={importSavedItems}
                  disabled={savedItemsLoading}
                  className="flex items-center gap-2 bg-[#F4A024] text-gray-900 px-4 py-2 rounded-md hover:bg-[#F4A024]/90 transition-colors font-medium disabled:opacity-50"
                >
                  <Upload className="w-4 h-4" />
                  Import Saved Items ({savedItems.length})
                </button>
              )}
              <button
                onClick={() => setShowProductSearch(true)}
                className="flex items-center gap-2 bg-[#F4A024] text-gray-900 px-4 py-2 rounded-md hover:bg-[#F4A024]/90 transition-colors font-medium"
              >
                <Search className="w-4 h-4" />
                Search Products
              </button>
            </div>
          </div>

          {/* Enhanced Product Search Modal */}
          {showProductSearch && (
            <div className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-start justify-center pt-16 px-4">
              <div className="bg-gray-900 rounded-lg shadow-lg w-full max-w-3xl p-6 relative">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-xl font-semibold text-white">Search Products</h3>
                  <button
                    onClick={() => {
                      setShowProductSearch(false);
                      setProductSearchQuery('');
                      setSearchResults([]);
                    }}
                    className="text-gray-400 hover:text-white transition-colors bg-gray-800 rounded-full p-2"
                  >
                    <X className="w-5 h-5" />
                  </button>
                </div>
                
                <div className="relative mb-4">
                  <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
                  <input
                    type="text"
                    value={productSearchQuery}
                    onChange={(e) => setProductSearchQuery(e.target.value)}
                    placeholder="Search for products to add to your RFQ..."
                    className="w-full bg-gray-800 text-white placeholder-gray-400 border border-gray-700 rounded-lg pl-10 pr-4 py-3 focus:outline-none focus:border-[#F4A024] focus:ring-1 focus:ring-[#F4A024]"
                    autoFocus
                  />
                  {searchLoading && (
                    <div className="absolute right-3 top-1/2 -translate-y-1/2">
                      <LoadingSpinner />
                    </div>
                  )}
                </div>
                
                <div className="max-h-[60vh] overflow-y-auto">
                  {searchResults.length > 0 ? (
                    <div className="space-y-2">
                      {searchResults.map((result) => (
                        <div
                          key={result.id}
                          className="p-3 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors cursor-pointer"
                          onClick={() => addItemFromSearch(result)}
                        >
                          <div className="flex items-center gap-3">
                            {result.image && (
                              <img
                                src={result.image}
                                alt={result.name}
                                className="w-16 h-16 object-cover rounded"
                              />
                            )}
                            <div className="flex-1">
                              <h4 className="font-medium text-white mb-1">{result.name}</h4>
                              <div className="flex gap-2 text-sm text-gray-400">
                                <span>{result.category}</span>
                                <span>•</span>
                                <span>{result.supplier}</span>
                                {result.price && (
                                  <>
                                    <span>•</span>
                                    <span className="text-[#F4A024]">{result.price}</span>
                                  </>
                                )}
                              </div>
                              <div className="text-xs text-gray-500 mt-1">
                                MOQ: {result.moq} • {result.marketplace} • {result.country}
                              </div>
                            </div>
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                addItemFromSearch(result);
                              }}
                              className="bg-[#F4A024] text-gray-900 px-3 py-1 rounded text-sm font-medium hover:bg-[#F4A024]/90 transition-colors"
                            >
                              Add to RFQ
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : productSearchQuery && !searchLoading ? (
                    <p className="text-center text-gray-400 py-8">
                      No products found. Try different keywords.
                    </p>
                  ) : !productSearchQuery ? (
                    <p className="text-center text-gray-400 py-8">
                      Start typing to search for products...
                    </p>
                  ) : null}
                </div>
              </div>
            </div>
          )}
          
          <div className="space-y-4 mb-6">
            {formData.items.length > 0 ? (
              formData.items.map((item) => (
                <div key={item.id} className="bg-gray-800 p-4 rounded-lg">
                  <div className="grid grid-cols-12 gap-4 items-center">
                    <div className="col-span-5">
                      <p className="text-gray-100 font-medium mb-1">{item.name}</p>
                      <a 
                        href={item.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-sm text-[#F4A024] hover:text-[#F4A024]/80"
                      >
                        View product
                      </a>
                    </div>
                    <div className="col-span-2 text-center">
                      <p className="text-sm text-gray-400">MOQ</p>
                      <p className="text-gray-300">{item.moq}</p>
                    </div>
                    <div className="col-span-3">
                      <label className="block text-sm text-gray-400 mb-1">Quantity</label>
                      <input
                        type="number"
                        min={item.moq !== 'N/A' ? item.moq : 1}
                        value={item.quantity}
                        onChange={(e) => handleItemQuantityChange(item.id, e.target.value)}
                        className="w-full bg-gray-700 border border-gray-600 rounded-md px-3 py-2 text-white focus:outline-none focus:border-[#F4A024]"
                      />
                    </div>
                    <div className="col-span-2 text-center">
                      <button
                        onClick={() => removeItem(item.id)}
                        className="text-red-400 hover:text-red-300 transition-colors p-2"
                        title="Remove item"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center py-8 border-2 border-dashed border-gray-700 rounded-lg">
                <p className="text-gray-400 font-bold mb-2">No items added yet</p>
                <p className="text-sm text-gray-500 font-bold">
                  {savedItems.length > 0 
                    ? 'Use the "Import Saved Items" button above or search for products to add'
                    : 'Search for products above to start creating your RFQ'
                  }
                </p>
              </div>
            )}

            {/* Vendor-specific product search (legacy support) */}
            {formData.vendorId && (
              <div className="mt-4">
                <div className="relative mb-4">
                  <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
                  <input
                    type="text"
                    value={productSearchQuery}
                    onChange={(e) => setProductSearchQuery(e.target.value)}
                    placeholder="Search vendor products..."
                    className="w-full bg-gray-800 border border-gray-700 rounded-md pl-10 pr-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
                  />
                </div>
                
                {productLoading ? (
                  <div className="text-center py-4">
                    <LoadingSpinner />
                  </div>
                ) : products.length > 0 ? (
                  <div className="mt-2 space-y-2 max-h-60 overflow-y-auto">
                    {products.map((product) => (
                      <button
                        key={product.Product_ID}
                        onClick={() => addItem(product)}
                        className="w-full text-left p-2 hover:bg-gray-800 rounded-md transition-colors"
                      >
                        {product.Product_Title}
                      </button>
                    ))}
                  </div>
                ) : productSearchQuery && (
                  <p className="text-gray-400 text-sm mt-2">No products found</p>
                )}

                <div className="mt-4">
                  <button
                    onClick={() => setShowProductSearch(true)}
                    className="flex items-center gap-2 text-[#F4A024] hover:text-[#F4A024]/80 transition-colors"
                  >
                    <Plus className="w-4 h-4" />
                    Add items from {formData.vendorName}
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="bg-gray-900 rounded-lg p-8 mb-8">
          <h2 className="text-xl font-semibold mb-6">Notes / Memo</h2>
          <textarea
            name="notes"
            value={formData.notes}
            onChange={handleChange}
            rows={6}
            className="w-full bg-gray-800 border border-gray-700 rounded-md px-4 py-2 text-white focus:outline-none focus:border-[#F4A024]"
            placeholder="Add any additional notes or special requirements..."
          />
        </div>

        <div className="flex justify-end">
          <button
            onClick={handlePDFDownload}
            disabled={pdfLoading}
            className="flex items-center gap-2 bg-[#F4A024] text-black px-6 py-3 rounded-lg hover:bg-[#F4A024]/90 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <FileText className="w-5 h-5" />
            {pdfLoading ? 'Generating PDF...' : 'Export as PDF'}
          </button>
        </div>
      </div>
    </div>
  );
}